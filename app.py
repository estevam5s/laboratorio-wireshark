import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
import base64
import os
import subprocess
import shutil
import time
import json
from PIL import Image
import requests
from io import BytesIO
import pyshark
from scapy.all import rdpcap, PacketList
import hashlib
import re
from datetime import datetime

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="CyberLab Wireshark",
    page_icon="üîê",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #0066cc;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.8rem;
        color: #004d99;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .highlight {
        background-color: #f0f8ff;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #0066cc;
    }
    .code-block {
        background-color: #f5f5f5;
        padding: 1rem;
        border-radius: 5px;
        font-family: monospace;
    }
    .success-box {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #155724;
    }
    .warning-box {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #856404;
    }
    .danger-box {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #721c24;
    }
    .terminal {
        background-color: #000;
        color: #00ff00;
        padding: 1rem;
        border-radius: 5px;
        font-family: monospace;
    }
    .challenge-card {
        background-color: #e6f7ff;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border: 1px solid #91d5ff;
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .packet-row {
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .packet-row:hover {
        background-color: #e6f7ff;
    }
    .packet-details {
        font-family: monospace;
        white-space: pre-wrap;
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 5px;
    }
    .nav-link {
        text-decoration: none;
        color: #0066cc;
        font-weight: bold;
        padding: 0.5rem;
        margin: 0.2rem;
        border-radius: 5px;
    }
    .nav-link:hover {
        background-color: #e6f7ff;
    }
    .progress-container {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para converter arquivos PCAP para DataFrame
def pcap_to_dataframe(pcap_file):
    try:
        # Verifica se o arquivo existe
        if not os.path.isfile(pcap_file):
            return None
        
        # Usa pyshark para ler o arquivo PCAP
        cap = pyshark.FileCapture(pcap_file)
        
        # Inicializa listas para armazenar dados
        packets = []
        
        # Processa cada pacote
        for i, packet in enumerate(cap):
            try:
                # Obt√©m a camada mais alta do pacote
                highest_layer = packet.highest_layer if hasattr(packet, 'highest_layer') else 'Unknown'
                
                # Informa√ß√µes b√°sicas do pacote
                packet_info = {
                    'No.': i + 1,
                    'Time': float(packet.sniff_time.timestamp()) if hasattr(packet, 'sniff_time') else 0,
                    'Source': packet.ip.src if hasattr(packet, 'ip') else 'Unknown',
                    'Destination': packet.ip.dst if hasattr(packet, 'ip') else 'Unknown',
                    'Protocol': highest_layer,
                    'Length': int(packet.length) if hasattr(packet, 'length') else 0,
                    'Info': get_packet_info(packet),
                    'Raw': str(packet)
                }
                
                # Adiciona √† lista de pacotes
                packets.append(packet_info)
            except AttributeError as e:
                # Ignora pacotes que n√£o podem ser processados
                continue
        
        # Cria um DataFrame com os dados
        df = pd.DataFrame(packets)
        
        # Converte a coluna Time para datetime
        if 'Time' in df.columns and not df.empty:
            df['Time'] = pd.to_datetime(df['Time'], unit='s')
        
        return df
    
    except Exception as e:
        st.error(f"Erro ao processar o arquivo PCAP: {str(e)}")
        return None

# Fun√ß√£o para extrair informa√ß√µes relevantes de um pacote
def get_packet_info(packet):
    info = ""
    
    try:
        # Para pacotes HTTP
        if hasattr(packet, 'http'):
            if hasattr(packet.http, 'request_method'):
                info = f"{packet.http.request_method} {packet.http.request_uri}"
            elif hasattr(packet.http, 'response_code'):
                info = f"HTTP {packet.http.response_code} {packet.http.response_phrase}"
        
        # Para pacotes TCP
        elif hasattr(packet, 'tcp'):
            src_port = packet.tcp.srcport
            dst_port = packet.tcp.dstport
            flags = []
            
            if hasattr(packet.tcp, 'flags_syn') and int(packet.tcp.flags_syn) == 1:
                flags.append('SYN')
            if hasattr(packet.tcp, 'flags_ack') and int(packet.tcp.flags_ack) == 1:
                flags.append('ACK')
            if hasattr(packet.tcp, 'flags_fin') and int(packet.tcp.flags_fin) == 1:
                flags.append('FIN')
            if hasattr(packet.tcp, 'flags_rst') and int(packet.tcp.flags_rst) == 1:
                flags.append('RST')
            
            flags_str = ' '.join(flags)
            info = f"{src_port} ‚Üí {dst_port} {flags_str}"
        
        # Para pacotes UDP
        elif hasattr(packet, 'udp'):
            src_port = packet.udp.srcport
            dst_port = packet.udp.dstport
            info = f"{src_port} ‚Üí {dst_port}"
        
        # Para pacotes DNS
        elif hasattr(packet, 'dns'):
            if hasattr(packet.dns, 'qry_name'):
                info = f"Query: {packet.dns.qry_name}"
            elif hasattr(packet.dns, 'resp_name'):
                info = f"Response: {packet.dns.resp_name}"
        
        # Para pacotes ICMP
        elif hasattr(packet, 'icmp'):
            if hasattr(packet.icmp, 'type'):
                icmp_type = packet.icmp.type
                if icmp_type == '8':
                    info = "Echo (ping) request"
                elif icmp_type == '0':
                    info = "Echo (ping) reply"
                else:
                    info = f"Type: {icmp_type}"
        
        # Se n√£o houver informa√ß√µes espec√≠ficas, use a camada de transporte
        if not info and hasattr(packet, 'transport_layer'):
            info = f"{packet.transport_layer} packet"
    
    except Exception as e:
        info = "Error parsing packet"
    
    return info if info else "No detailed info"

# Fun√ß√£o para simular a captura de pacotes
def simulate_packet_capture(protocol_type="http", duration=10):
    protocols = {
        "http": generate_http_traffic,
        "dns": generate_dns_traffic,
        "tcp": generate_tcp_traffic,
        "icmp": generate_icmp_traffic,
        "https": generate_https_traffic,
        "mixed": generate_mixed_traffic
    }
    
    generator_func = protocols.get(protocol_type.lower(), generate_mixed_traffic)
    
    return generator_func(duration)

# Geradores de tr√°fego simulado para diferentes protocolos
def generate_http_traffic(duration):
    num_packets = duration * 5  # 5 pacotes por segundo
    
    current_time = datetime.now()
    packets = []
    
    # IPs simulados
    client_ip = "192.168.1.100"
    server_ip = "203.0.113.10"
    
    # M√©todos HTTP e URIs
    methods = ["GET", "POST", "PUT", "DELETE"]
    uris = ["/index.html", "/api/users", "/login", "/images/logo.png", "/css/style.css"]
    
    # Status codes
    status_codes = ["200 OK", "404 Not Found", "500 Internal Server Error", "302 Found", "401 Unauthorized"]
    
    for i in range(num_packets):
        if i % 2 == 0:  # Requisi√ß√£o
            method = np.random.choice(methods)
            uri = np.random.choice(uris)
            
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/5),
                'Source': client_ip,
                'Destination': server_ip,
                'Protocol': 'HTTP',
                'Length': np.random.randint(100, 1500),
                'Info': f"{method} {uri} HTTP/1.1",
                'Raw': f"HTTP Request\nMethod: {method}\nURI: {uri}\nHost: example.com\nUser-Agent: Mozilla/5.0"
            }
        else:  # Resposta
            status = np.random.choice(status_codes)
            
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/5 + 0.1),
                'Source': server_ip,
                'Destination': client_ip,
                'Protocol': 'HTTP',
                'Length': np.random.randint(200, 5000),
                'Info': f"HTTP/1.1 {status}",
                'Raw': f"HTTP Response\nStatus: {status}\nContent-Type: text/html\nContent-Length: 1024"
            }
        
        packets.append(packet)
    
    return pd.DataFrame(packets)

def generate_dns_traffic(duration):
    num_packets = duration * 3  # 3 pacotes por segundo
    
    current_time = datetime.now()
    packets = []
    
    # IPs simulados
    client_ip = "192.168.1.100"
    dns_server = "8.8.8.8"
    
    # Dom√≠nios para consulta
    domains = ["example.com", "google.com", "facebook.com", "amazon.com", "microsoft.com"]
    
    for i in range(num_packets):
        domain = np.random.choice(domains)
        
        if i % 2 == 0:  # Query
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/3),
                'Source': client_ip,
                'Destination': dns_server,
                'Protocol': 'DNS',
                'Length': np.random.randint(60, 100),
                'Info': f"Query: {domain}",
                'Raw': f"DNS Query\nTransaction ID: 0x{np.random.randint(0, 65535):04x}\nQueries: {domain}"
            }
        else:  # Response
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/3 + 0.05),
                'Source': dns_server,
                'Destination': client_ip,
                'Protocol': 'DNS',
                'Length': np.random.randint(100, 300),
                'Info': f"Response: {domain}",
                'Raw': f"DNS Response\nTransaction ID: 0x{np.random.randint(0, 65535):04x}\nQueries: {domain}\nAnswers: {domain} IN A {'.'.join(str(np.random.randint(0, 255)) for _ in range(4))}"
            }
        
        packets.append(packet)
    
    return pd.DataFrame(packets)

def generate_tcp_traffic(duration):
    num_packets = duration * 8  # 8 pacotes por segundo
    
    current_time = datetime.now()
    packets = []
    
    # IPs e portas simulados
    client_ip = "192.168.1.100"
    server_ip = "203.0.113.10"
    client_port = np.random.randint(49152, 65535)
    server_port = 80
    
    # Flag combina√ß√µes para simula√ß√£o de three-way handshake e outras intera√ß√µes TCP
    connections = []
    
    for i in range(num_packets):
        # A cada 10 pacotes, inicia uma nova conex√£o
        if i % 10 == 0:
            client_port = np.random.randint(49152, 65535)
            connections.append((client_port, server_port))
        
        # Escolhe uma conex√£o para o pacote atual
        client_port, server_port = np.random.choice(connections)
        
        # Decide o tipo de pacote
        packet_type = np.random.choice(["handshake", "data", "fin"])
        
        if packet_type == "handshake":
            # Simula um Three-Way Handshake
            handshake_step = np.random.randint(1, 4)
            
            if handshake_step == 1:  # SYN
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': client_ip,
                    'Destination': server_ip,
                    'Protocol': 'TCP',
                    'Length': 74,
                    'Info': f"{client_port} ‚Üí {server_port} [SYN] Seq=0 Win=64240",
                    'Raw': f"TCP Packet\nSource Port: {client_port}\nDestination Port: {server_port}\nFlags: SYN\nSequence Number: 0\nWindow Size: 64240"
                }
            elif handshake_step == 2:  # SYN-ACK
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': server_ip,
                    'Destination': client_ip,
                    'Protocol': 'TCP',
                    'Length': 74,
                    'Info': f"{server_port} ‚Üí {client_port} [SYN, ACK] Seq=0 Ack=1 Win=65535",
                    'Raw': f"TCP Packet\nSource Port: {server_port}\nDestination Port: {client_port}\nFlags: SYN, ACK\nSequence Number: 0\nAcknowledgment Number: 1\nWindow Size: 65535"
                }
            else:  # ACK
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': client_ip,
                    'Destination': server_ip,
                    'Protocol': 'TCP',
                    'Length': 66,
                    'Info': f"{client_port} ‚Üí {server_port} [ACK] Seq=1 Ack=1 Win=64240",
                    'Raw': f"TCP Packet\nSource Port: {client_port}\nDestination Port: {server_port}\nFlags: ACK\nSequence Number: 1\nAcknowledgment Number: 1\nWindow Size: 64240"
                }
        
        elif packet_type == "data":
            # Simula transfer√™ncia de dados
            direction = np.random.choice(["client_to_server", "server_to_client"])
            
            if direction == "client_to_server":
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': client_ip,
                    'Destination': server_ip,
                    'Protocol': 'TCP',
                    'Length': np.random.randint(100, 1500),
                    'Info': f"{client_port} ‚Üí {server_port} [PSH, ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)} Len={np.random.randint(100, 1000)}",
                    'Raw': f"TCP Packet\nSource Port: {client_port}\nDestination Port: {server_port}\nFlags: PSH, ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}\nLength: {np.random.randint(100, 1000)}"
                }
            else:
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': server_ip,
                    'Destination': client_ip,
                    'Protocol': 'TCP',
                    'Length': np.random.randint(100, 1500),
                    'Info': f"{server_port} ‚Üí {client_port} [PSH, ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)} Len={np.random.randint(100, 1000)}",
                    'Raw': f"TCP Packet\nSource Port: {server_port}\nDestination Port: {client_port}\nFlags: PSH, ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}\nLength: {np.random.randint(100, 1000)}"
                }
        
        else:  # fin
            # Simula encerramento de conex√£o
            fin_step = np.random.randint(1, 5)
            
            if fin_step == 1:  # FIN from client
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': client_ip,
                    'Destination': server_ip,
                    'Protocol': 'TCP',
                    'Length': 66,
                    'Info': f"{client_port} ‚Üí {server_port} [FIN, ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)}",
                    'Raw': f"TCP Packet\nSource Port: {client_port}\nDestination Port: {server_port}\nFlags: FIN, ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}"
                }
            elif fin_step == 2:  # ACK from server
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': server_ip,
                    'Destination': client_ip,
                    'Protocol': 'TCP',
                    'Length': 66,
                    'Info': f"{server_port} ‚Üí {client_port} [ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)}",
                    'Raw': f"TCP Packet\nSource Port: {server_port}\nDestination Port: {client_port}\nFlags: ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}"
                }
            elif fin_step == 3:  # FIN from server
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': server_ip,
                    'Destination': client_ip,
                    'Protocol': 'TCP',
                    'Length': 66,
                    'Info': f"{server_port} ‚Üí {client_port} [FIN, ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)}",
                    'Raw': f"TCP Packet\nSource Port: {server_port}\nDestination Port: {client_port}\nFlags: FIN, ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}"
                }
            else:  # ACK from client
                packet = {
                    'No.': i + 1,
                    'Time': current_time + pd.Timedelta(seconds=i/8),
                    'Source': client_ip,
                    'Destination': server_ip,
                    'Protocol': 'TCP',
                    'Length': 66,
                    'Info': f"{client_port} ‚Üí {server_port} [ACK] Seq={np.random.randint(1, 10000)} Ack={np.random.randint(1, 10000)}",
                    'Raw': f"TCP Packet\nSource Port: {client_port}\nDestination Port: {server_port}\nFlags: ACK\nSequence Number: {np.random.randint(1, 10000)}\nAcknowledgment Number: {np.random.randint(1, 10000)}"
                }
        
        packets.append(packet)
    
    return pd.DataFrame(packets)

def generate_icmp_traffic(duration):
    num_packets = duration * 2  # 2 pacotes por segundo
    
    current_time = datetime.now()
    packets = []
    
    # IPs simulados
    source_ip = "192.168.1.100"
    destination_ip = "8.8.8.8"
    
    for i in range(num_packets):
        # Alterna entre requisi√ß√£o e resposta
        if i % 2 == 0:  # Echo request
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/2),
                'Source': source_ip,
                'Destination': destination_ip,
                'Protocol': 'ICMP',
                'Length': 98,
                'Info': f"Echo (ping) request, id={np.random.randint(1, 65535)}, seq={i//2}",
                'Raw': f"ICMP Packet\nType: 8 (Echo Request)\nCode: 0\nIdentifier: {np.random.randint(1, 65535)}\nSequence Number: {i//2}\nData: abcdefghijklmnopqrstuvwxyz"
            }
        else:  # Echo reply
            packet = {
                'No.': i + 1,
                'Time': current_time + pd.Timedelta(seconds=i/2 + 0.1),
                'Source': destination_ip,
                'Destination': source_ip,
                'Protocol': 'ICMP',
                'Length': 98,
                'Info': f"Echo (ping) reply, id={np.random.randint(1, 65535)}, seq={(i-1)//2}",
                'Raw': f"ICMP Packet\nType: 0 (Echo Reply)\nCode: 0\nIdentifier: {np.random.randint(1, 65535)}\nSequence Number: {(i-1)//2}\nData: abcdefghijklmnopqrstuvwxyz"
            }
        
        packets.append(packet)
    
    return pd.DataFrame(packets)

def generate_https_traffic(duration):
    num_packets = duration * 5  # 5 pacotes por segundo
    
    current_time = datetime.now()
    packets = []
    
    # IPs simulados
    client_ip = "192.168.1.100"
    server_ip = "203.0.113.10"
    client_port = np.random.randint(49152, 65535)
    server_port = 443
    
    # Est√°gios do TLS handshake
    tls_stages = [
        "Client Hello",
        "Server Hello",
        "Certificate",
        "Server Key Exchange",
        "Server Hello Done",
        "Client Key Exchange",
        "Change Cipher Spec (Client)",
        "Encrypted Handshake Message (Client)",
        "Change Cipher Spec (Server)",
        "Encrypted Handshake Message (Server)",
        "Application Data"
    ]
    
    # √çndice inicial para o est√°gio TLS
    tls_index = 0
    
    for i in range(num_packets):
        # A cada 10 pacotes, reinicia uma nova sess√£o TLS
        if i % 10 == 0:
            client_port = np.random.randint(49152, 65535)
            tls_index = 0
        
        # Obt√©m o est√°gio TLS atual (com alguma varia√ß√£o)
        current_stage = tls_stages[min(tls_index, len(tls_stages) - 1)]
        tls_index = min(tls_index + np.random.randint(0, 2), len(tls_stages) - 1)
        
        # Determina a dire√ß√£o do pacote
        if current_stage in ["Client Hello", "Client Key Exchange", "Change Cipher Spec (Client)", "Encrypted Handshake Message (Client)"]:
            src_ip = client_ip
            dst_ip = server_ip
            src_port = client_port
            dst_port = server_port
        else:
            src_ip = server_ip
            dst_ip = client_ip
            src_port = server_port
            dst_port = client_port
        
        # Para pacotes de dados da aplica√ß√£o, alterna dire√ß√£o
        if current_stage == "Application Data":
            if np.random.random() < 0.5:
                src_ip, dst_ip = dst_ip, src_ip
                src_port, dst_port = dst_port, src_port
        
        # Tamanho do pacote com base no est√°gio
        if current_stage == "Certificate":
            length = np.random.randint(1000, 5000)
        elif current_stage == "Application Data":
            length = np.random.randint(100, 3000)
        else:
            length = np.random.randint(100, 500)
        
        packet = {
            'No.': i + 1,
            'Time': current_time + pd.Timedelta(seconds=i/5),
            'Source': src_ip,
            'Destination': dst_ip,
            'Protocol': 'TLSv1.2' if np.random.random() < 0.7 else 'TLSv1.3',
            'Length': length,
            'Info': f"{src_port} ‚Üí {dst_port} {current_stage}",
            'Raw': f"TLS Packet\nSource Port: {src_port}\nDestination Port: {dst_port}\nContent Type: {current_stage}\nVersion: TLS {'1.2' if np.random.random() < 0.7 else '1.3'}\nLength: {length}"
        }
        
        packets.append(packet)
    
    return pd.DataFrame(packets)

def generate_mixed_traffic(duration):
    # Combina diferentes tipos de tr√°fego
    num_http = int(duration * 2)
    num_dns = int(duration * 1)
    num_tcp = int(duration * 3)
    num_icmp = int(duration * 0.5)
    num_https = int(duration * 2)
    
    http_df = generate_http_traffic(num_http)
    dns_df = generate_dns_traffic(num_dns)
    tcp_df = generate_tcp_traffic(num_tcp)
    icmp_df = generate_icmp_traffic(num_icmp)
    https_df = generate_https_traffic(num_https)
    
    # Combina todos os DataFrames
    combined_df = pd.concat([http_df, dns_df, tcp_df, icmp_df, https_df], ignore_index=True)
    
    # Ordena por tempo
    combined_df = combined_df.sort_values('Time').reset_index(drop=True)
    
    # Atualiza o n√∫mero sequencial
    combined_df['No.'] = np.arange(1, len(combined_df) + 1)
    
    return combined_df

# Fun√ß√£o para extrair estat√≠sticas dos pacotes
def extract_packet_statistics(df):
    if df is None or df.empty:
        return {
            "total_packets": 0,
            "protocols": {},
            "ip_sources": {},
            "ip_destinations": {},
            "avg_packet_size": 0,
            "time_range": {"start": None, "end": None},
            "packet_rate": 0
        }
    
    # Total de pacotes
    total_packets = len(df)
    
    # Contagem de protocolos
    protocol_counts = df['Protocol'].value_counts().to_dict()
    
    # Contagem de IPs fonte
    ip_source_counts = df['Source'].value_counts().to_dict()
    
    # Contagem de IPs destino
    ip_dest_counts = df['Destination'].value_counts().to_dict()
    
    # Tamanho m√©dio dos pacotes
    avg_packet_size = df['Length'].mean()
    
    # Intervalo de tempo (primeiro e √∫ltimo pacote)
    if 'Time' in df.columns:
        time_range = {
            "start": df['Time'].min(),
            "end": df['Time'].max()
        }
        
        # Pacotes por segundo
        time_diff = (time_range["end"] - time_range["start"]).total_seconds()
        packet_rate = total_packets / time_diff if time_diff > 0 else 0
    else:
        time_range = {"start": None, "end": None}
        packet_rate = 0
    
    return {
        "total_packets": total_packets,
        "protocols": protocol_counts,
        "ip_sources": ip_source_counts,
        "ip_destinations": ip_dest_counts,
        "avg_packet_size": avg_packet_size,
        "time_range": time_range,
        "packet_rate": packet_rate
    }

# Fun√ß√£o para aplicar filtros a um DataFrame de pacotes
def apply_filters(df, filters):
    if df is None or df.empty:
        return df
    
    filtered_df = df.copy()
    
    # Filtro por protocolo
    if filters.get('protocol'):
        filtered_df = filtered_df[filtered_df['Protocol'] == filters['protocol']]
    
    # Filtro por IP de origem
    if filters.get('source_ip'):
        filtered_df = filtered_df[filtered_df['Source'].str.contains(filters['source_ip'], regex=False)]
    
    # Filtro por IP de destino
    if filters.get('dest_ip'):
        filtered_df = filtered_df[filtered_df['Destination'].str.contains(filters['dest_ip'], regex=False)]
    
    # Filtro por conte√∫do (texto em qualquer coluna)
    if filters.get('content'):
        content_filter = filters['content'].lower()
        mask = filtered_df.apply(lambda row: any(content_filter in str(val).lower() for val in row), axis=1)
        filtered_df = filtered_df[mask]
    
    # Filtro por tamanho m√≠nimo de pacote
    if filters.get('min_length') is not None:
        filtered_df = filtered_df[filtered_df['Length'] >= filters['min_length']]
    
    # Filtro por tamanho m√°ximo de pacote
    if filters.get('max_length') is not None:
        filtered_df = filtered_df[filtered_df['Length'] <= filters['max_length']]
    
    return filtered_df

# Fun√ß√£o para detectar padr√µes de tr√°fego suspeito
def detect_suspicious_patterns(df):
    if df is None or df.empty:
        return []
    
    suspicious_activities = []
    
    # 1. Detectar poss√≠vel port scanning (muitas conex√µes para portas diferentes de um mesmo IP)
    if 'Info' in df.columns:
        # Filtramos pacotes TCP/UDP para an√°lise
        tcp_packets = df[df['Protocol'].isin(['TCP', 'UDP'])]
        
        # Extra√≠mos origem, destino e informa√ß√µes de porta (simplificado)
        src_to_dst_ports = {}
        
        for idx, row in tcp_packets.iterrows():
            src = row['Source']
            dst = row['Destination']
            
            # Tentamos extrair informa√ß√µes de porta da coluna Info
            port_info = re.search(r'(\d+)\s*‚Üí\s*(\d+)', row['Info'])
            
            if port_info:
                src_port = int(port_info.group(1))
                dst_port = int(port_info.group(2))
                
                # Registramos a combina√ß√£o IP fonte -> porta destino
                if src not in src_to_dst_ports:
                    src_to_dst_ports[src] = set()
                
                src_to_dst_ports[src].add(dst_port)
        
        # Verificamos se algum IP fonte se conectou a muitas portas diferentes
        port_scan_threshold = 15  # Limite arbitr√°rio
        for src, ports in src_to_dst_ports.items():
            if len(ports) > port_scan_threshold:
                suspicious_activities.append({
                    'type': 'Port Scanning',
                    'source': src,
                    'details': f"Poss√≠vel port scanning: {src} se conectou a {len(ports)} portas diferentes",
                    'severity': 'high'
                })
    
    # 2. Detectar flood de pacotes (muitos pacotes em um curto per√≠odo de tempo)
    if 'Time' in df.columns:
        # Agrupamos por segundo e contamos pacotes
        df['TimeSecond'] = df['Time'].dt.floor('S')
        packets_per_second = df.groupby('TimeSecond').size()
        
        # Se tiver mais de X pacotes por segundo, pode ser flood
        flood_threshold = 100  # Limite arbitr√°rio
        flood_seconds = packets_per_second[packets_per_second > flood_threshold]
        
        if not flood_seconds.empty:
            for time, count in flood_seconds.items():
                # Identificamos os IPs fonte mais comuns naquele segundo
                packets_in_second = df[df['TimeSecond'] == time]
                top_sources = packets_in_second['Source'].value_counts().head(3)
                
                sources_str = ", ".join([f"{ip} ({count} pacotes)" for ip, count in top_sources.items()])
                
                suspicious_activities.append({
                    'type': 'Packet Flood',
                    'time': time,
                    'details': f"Poss√≠vel flood: {count} pacotes em 1 segundo. Principais fontes: {sources_str}",
                    'severity': 'medium'
                })
    
    # 3. Detectar tentativas de brute force (muitas conex√µes TCP falhas)
    if 'Info' in df.columns and 'Protocol' in df.columns:
        tcp_resets = df[(df['Protocol'] == 'TCP') & (df['Info'].str.contains('RST'))]
        
        # Agrupamos resets por combina√ß√£o de origem e destino
        reset_counts = tcp_resets.groupby(['Source', 'Destination']).size()
        
        # Se tiver muitos resets para a mesma combina√ß√£o, pode ser brute force
        brute_force_threshold = 10  # Limite arbitr√°rio
        potential_brute_force = reset_counts[reset_counts > brute_force_threshold]
        
        if not potential_brute_force.empty:
            for (src, dst), count in potential_brute_force.items():
                suspicious_activities.append({
                    'type': 'Brute Force',
                    'source': src,
                    'destination': dst,
                    'details': f"Poss√≠vel brute force: {count} conex√µes TCP resetadas entre {src} e {dst}",
                    'severity': 'high'
                })
    
    # 4. Detectar poss√≠veis exfiltra√ß√µes de dados (pacotes grandes para fora da rede)
    internal_networks = ['192.168.', '10.', '172.16.', '172.17.', '172.18.', '172.19.', '172.20.', '172.21.', '172.22.', '172.23.', '172.24.', '172.25.', '172.26.', '172.27.', '172.28.', '172.29.', '172.30.', '172.31.']
    
    outbound_packets = df.copy()
    
    # Filtramos pacotes que v√£o de rede interna para externa
    for idx, row in df.iterrows():
        src = row['Source']
        dst = row['Destination']
        
        src_is_internal = any(src.startswith(prefix) for prefix in internal_networks)
        dst_is_internal = any(dst.startswith(prefix) for prefix in internal_networks)
        
        if not (src_is_internal and not dst_is_internal):
            outbound_packets = outbound_packets.drop(idx)
    
    # Verificamos pacotes grandes saindo da rede
    large_packet_threshold = 1500  # Limite arbitr√°rio em bytes
    large_outbound = outbound_packets[outbound_packets['Length'] > large_packet_threshold]
    
    if not large_outbound.empty:
        # Agrupamos por IP fonte
        large_by_source = large_outbound.groupby('Source')['Length'].sum()
        
        for src, total_size in large_by_source.items():
            if total_size > 50000:  # Limite arbitr√°rio de volume total
                suspicious_activities.append({
                    'type': 'Data Exfiltration',
                    'source': src,
                    'details': f"Poss√≠vel exfiltra√ß√£o de dados: {src} enviou {total_size/1024:.2f} KB para fora da rede",
                    'severity': 'high'
                })
    
    return suspicious_activities

# Fun√ß√£o para extrair detalhes avan√ßados de pacotes
def extract_advanced_packet_details(raw_packet):
    details = {}
    
    try:
        # Dividimos o pacote bruto por linhas
        lines = raw_packet.split('\n')
        
        # Processamos cada linha
        current_section = "General"
        details[current_section] = {}
        
        for line in lines:
            line = line.strip()
            
            # Se a linha estiver vazia, continuamos
            if not line:
                continue
            
            # Verificamos se √© um novo cabe√ßalho de se√ß√£o
            if line.endswith('Packet') or line.endswith('Header') or any(proto in line for proto in ['TCP', 'UDP', 'HTTP', 'DNS', 'ICMP', 'TLS', 'SSL']):
                current_section = line.strip(':')
                details[current_section] = {}
                continue
            
            # Procuramos pelo formato "chave: valor"
            parts = line.split(':', 1)
            if len(parts) == 2:
                key = parts[0].strip()
                value = parts[1].strip()
                details[current_section][key] = value
    
    except Exception as e:
        details["Error"] = str(e)
    
    return details

# Fun√ß√£o para gerar relat√≥rio de an√°lise
def generate_analysis_report(df, statistics, suspicious_activities):
    report = {}
    
    # Resumo geral
    report["summary"] = {
        "total_packets": statistics["total_packets"],
        "time_period": f"{statistics['time_range']['start']} at√© {statistics['time_range']['end']}" if statistics['time_range']['start'] else "N/A",
        "packet_rate": f"{statistics['packet_rate']:.2f} pacotes/segundo",
        "avg_packet_size": f"{statistics['avg_packet_size']:.2f} bytes",
        "protocol_distribution": statistics["protocols"],
    }
    
    # TOP IPs
    report["top_ips"] = {
        "sources": dict(sorted(statistics["ip_sources"].items(), key=lambda x: x[1], reverse=True)[:10]),
        "destinations": dict(sorted(statistics["ip_destinations"].items(), key=lambda x: x[1], reverse=True)[:10]),
    }
    
    # Fluxos de comunica√ß√£o mais relevantes
    if not df.empty:
        flows = df.groupby(['Source', 'Destination']).size().reset_index(name='count')
        flows = flows.sort_values('count', ascending=False).head(10)
        
        report["top_flows"] = []
        for _, row in flows.iterrows():
            report["top_flows"].append({
                "source": row['Source'],
                "destination": row['Destination'],
                "packet_count": row['count'],
            })
    else:
        report["top_flows"] = []
    
    # Atividades suspeitas
    report["suspicious_activities"] = suspicious_activities
    
    # Recomenda√ß√µes (com base nas atividades suspeitas)
    report["recommendations"] = []
    
    for activity in suspicious_activities:
        if activity['type'] == 'Port Scanning':
            report["recommendations"].append({
                "title": "Implementar prote√ß√£o contra port scanning",
                "description": "Configure seu firewall para limitar tentativas de conex√£o de um √∫nico IP em um curto per√≠odo.",
                "severity": "high"
            })
        elif activity['type'] == 'Packet Flood':
            report["recommendations"].append({
                "title": "Configurar prote√ß√£o contra DDoS",
                "description": "Implemente rate limiting e considere servi√ßos de mitiga√ß√£o de DDoS para proteger contra floods.",
                "severity": "medium"
            })
        elif activity['type'] == 'Brute Force':
            report["recommendations"].append({
                "title": "Fortalecer autentica√ß√£o",
                "description": "Implemente bloqueio de conta ap√≥s m√∫ltiplas tentativas falhas e considere autentica√ß√£o de dois fatores.",
                "severity": "high"
            })
        elif activity['type'] == 'Data Exfiltration':
            report["recommendations"].append({
                "title": "Monitorar transfer√™ncias de dados",
                "description": "Implemente DLP (Data Loss Prevention) e monitore transfer√™ncias de grandes volumes de dados para fora da rede.",
                "severity": "high"
            })
    
    return report

# Fun√ß√£o para gerar gr√°ficos de an√°lise de pacotes
def generate_analysis_charts(df, statistics):
    charts = {}
    
    if df is None or df.empty:
        return charts
    
    # 1. Distribui√ß√£o de protocolos (gr√°fico de pizza)
    if statistics["protocols"]:
        protocols_df = pd.DataFrame({
            'Protocol': list(statistics["protocols"].keys()),
            'Count': list(statistics["protocols"].values())
        })
        
        protocols_fig = px.pie(
            protocols_df, 
            values='Count', 
            names='Protocol', 
            title='Distribui√ß√£o de Protocolos',
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        
        charts["protocol_distribution"] = protocols_fig
    
    # 2. Top IPs de origem (gr√°fico de barras)
    if statistics["ip_sources"]:
        sources_df = pd.DataFrame({
            'IP': list(statistics["ip_sources"].keys()),
            'Count': list(statistics["ip_sources"].values())
        }).sort_values('Count', ascending=False).head(10)
        
        sources_fig = px.bar(
            sources_df, 
            x='IP', 
            y='Count', 
            title='Top 10 IPs de Origem',
            color='Count',
            color_continuous_scale='Viridis'
        )
        
        charts["top_sources"] = sources_fig
    
    # 3. Top IPs de destino (gr√°fico de barras)
    if statistics["ip_destinations"]:
        dests_df = pd.DataFrame({
            'IP': list(statistics["ip_destinations"].keys()),
            'Count': list(statistics["ip_destinations"].values())
        }).sort_values('Count', ascending=False).head(10)
        
        dests_fig = px.bar(
            dests_df, 
            x='IP', 
            y='Count', 
            title='Top 10 IPs de Destino',
            color='Count',
            color_continuous_scale='Viridis'
        )
        
        charts["top_destinations"] = dests_fig
    
    # 4. Pacotes ao longo do tempo (gr√°fico de linha)
    if 'Time' in df.columns:
        # Agrupamos por minuto para visualiza√ß√£o mais clara
        df['TimeMinute'] = df['Time'].dt.floor('min')
        packets_per_minute = df.groupby('TimeMinute').size().reset_index(name='count')
        
        timeline_fig = px.line(
            packets_per_minute, 
            x='TimeMinute', 
            y='count', 
            title='Pacotes por Minuto',
            markers=True
        )
        
        charts["packets_timeline"] = timeline_fig
    
    # 5. Tamanho dos pacotes (histograma)
    packet_size_fig = px.histogram(
        df, 
        x='Length', 
        title='Distribui√ß√£o de Tamanho de Pacotes',
        color_discrete_sequence=['#3498db']
    )
    
    charts["packet_size_distribution"] = packet_size_fig
    
    # 6. Grafo de comunica√ß√£o (gr√°fico de rede)
    if len(df) > 0:
        # Criamos um DataFrame com pares origem-destino e contagem
        edges = df.groupby(['Source', 'Destination']).size().reset_index(name='weight')
        
        # Limitamos aos 30 fluxos mais significativos para n√£o sobrecarregar o gr√°fico
        edges = edges.sort_values('weight', ascending=False).head(30)
        
        # Criamos n√≥s √∫nicos
        nodes = pd.DataFrame({
            'id': pd.unique(edges[['Source', 'Destination']].values.ravel('K'))
        })
        
        # Criamos o gr√°fico de rede
        network_fig = go.Figure()
        
        # Adicionamos as arestas (conex√µes)
        for _, edge in edges.iterrows():
            network_fig.add_trace(
                go.Scatter(
                    x=[edge['Source'], edge['Destination']],
                    y=[0, 0],
                    mode='lines',
                    line=dict(width=edge['weight'] / edges['weight'].max() * 10, color='#2c3e50'),
                    hoverinfo='text',
                    text=f"{edge['Source']} ‚Üí {edge['Destination']} ({edge['weight']} pacotes)",
                    showlegend=False
                )
            )
        
        # Adicionamos os n√≥s (IPs)
        for _, node in nodes.iterrows():
            network_fig.add_trace(
                go.Scatter(
                    x=[node['id']],
                    y=[0],
                    mode='markers',
                    marker=dict(
                        size=15,
                        color='#e74c3c',
                        line=dict(width=2, color='#c0392b')
                    ),
                    name=node['id'],
                    hoverinfo='text',
                    text=node['id']
                )
            )
        
        network_fig.update_layout(
            title='Grafo de Comunica√ß√£o de Rede',
            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
            showlegend=False,
            hovermode='closest',
            plot_bgcolor='rgba(0,0,0,0)'
        )
        
        charts["network_graph"] = network_fig
    
    return charts

# Simulador de Wireshark Web
def wireshark_simulator():
    st.markdown("<h1 class='main-header'>Simulador Wireshark Web</h1>", unsafe_allow_html=True)
    
    # Sidebar para controles
    with st.sidebar:
        st.header("Controles")
        
        # Op√ß√µes de captura
        st.subheader("Captura de Pacotes")
        
        upload_choice = st.radio(
            "Escolha o m√©todo de entrada:",
            ("Carregar arquivo PCAP", "Simula√ß√£o de captura")
        )
        
        if upload_choice == "Carregar arquivo PCAP":
            uploaded_file = st.file_uploader("Escolha um arquivo PCAP", type=["pcap", "pcapng"])
            
            if uploaded_file is not None:
                # Salva o arquivo temporariamente
                temp_file_path = os.path.join("/tmp", uploaded_file.name)
                with open(temp_file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                # Carrega o arquivo PCAP
                st.session_state.df = pcap_to_dataframe(temp_file_path)
                st.success(f"Arquivo carregado: {uploaded_file.name}")
                
                # Remove o arquivo tempor√°rio
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
        else:
            st.subheader("Simula√ß√£o de Captura")
            protocol_type = st.selectbox(
                "Tipo de Tr√°fego:",
                ["HTTP", "DNS", "TCP", "ICMP", "HTTPS", "Mixed"]
            )
            
            duration = st.slider("Dura√ß√£o da Captura (segundos):", 5, 60, 10)
            
            if st.button("Iniciar Captura Simulada"):
                st.session_state.df = simulate_packet_capture(protocol_type.lower(), duration)
                st.success(f"Captura simulada de tr√°fego {protocol_type} por {duration} segundos.")
        
        # Filtros
        st.subheader("Filtros")
        
        # Verifica se j√° temos dados carregados
        if hasattr(st.session_state, 'df') and st.session_state.df is not None:
            # Extra√≠mos protocolos √∫nicos para o seletor
            protocols = [""] + sorted(st.session_state.df['Protocol'].unique().tolist())
            selected_protocol = st.selectbox("Protocolo:", protocols)
            
            source_ip = st.text_input("IP de Origem (cont√©m):")
            dest_ip = st.text_input("IP de Destino (cont√©m):")
            
            content_filter = st.text_input("Conte√∫do (busca global):")
            
            min_length = st.number_input("Tamanho M√≠nimo:", value=0, min_value=0)
            max_length = st.number_input("Tamanho M√°ximo:", value=0, min_value=0)
            
            filters = {
                "protocol": selected_protocol if selected_protocol else None,
                "source_ip": source_ip if source_ip else None,
                "dest_ip": dest_ip if dest_ip else None,
                "content": content_filter if content_filter else None,
                "min_length": min_length if min_length > 0 else None,
                "max_length": max_length if max_length > 0 else None
            }
            
            # Aplicamos os filtros
            if any(v is not None for v in filters.values()):
                st.session_state.filtered_df = apply_filters(st.session_state.df, filters)
                st.write(f"Mostrando {len(st.session_state.filtered_df)} de {len(st.session_state.df)} pacotes.")
            else:
                st.session_state.filtered_df = st.session_state.df
        
        # An√°lises avan√ßadas
        st.subheader("An√°lises Avan√ßadas")
        
        if hasattr(st.session_state, 'df') and st.session_state.df is not None:
            if st.button("Detectar Atividades Suspeitas"):
                with st.spinner("Analisando pacotes..."):
                    suspicious_activities = detect_suspicious_patterns(st.session_state.filtered_df)
                    st.session_state.suspicious_activities = suspicious_activities
                    
                    if suspicious_activities:
                        st.warning(f"Encontradas {len(suspicious_activities)} atividades suspeitas!")
                    else:
                        st.success("Nenhuma atividade suspeita detectada.")
            
            if st.button("Gerar Relat√≥rio de An√°lise"):
                with st.spinner("Gerando relat√≥rio..."):
                    # Extra√≠mos estat√≠sticas
                    statistics = extract_packet_statistics(st.session_state.filtered_df)
                    
                    # Detectamos atividades suspeitas (se ainda n√£o tiver feito)
                    if not hasattr(st.session_state, 'suspicious_activities'):
                        st.session_state.suspicious_activities = detect_suspicious_patterns(st.session_state.filtered_df)
                    
                    # Geramos o relat√≥rio
                    report = generate_analysis_report(
                        st.session_state.filtered_df,
                        statistics,
                        st.session_state.suspicious_activities
                    )
                    
                    # Salvamos o relat√≥rio na sess√£o
                    st.session_state.analysis_report = report
                    
                    st.success("Relat√≥rio gerado com sucesso!")
            
            if st.button("Visualizar Estat√≠sticas"):
                with st.spinner("Gerando visualiza√ß√µes..."):
                    # Extra√≠mos estat√≠sticas
                    statistics = extract_packet_statistics(st.session_state.filtered_df)
                    
                    # Geramos os gr√°ficos
                    charts = generate_analysis_charts(st.session_state.filtered_df, statistics)
                    
                    # Salvamos os gr√°ficos na sess√£o
                    st.session_state.analysis_charts = charts
                    
                    st.success("Visualiza√ß√µes geradas com sucesso!")
    
    # Conte√∫do principal
    # Verifica se temos dados para mostrar
    if hasattr(st.session_state, 'filtered_df') and st.session_state.filtered_df is not None:
        df_to_display = st.session_state.filtered_df
        
        # Abas para a interface principal
        tabs = st.tabs(["Pacotes", "Detalhes", "An√°lise", "Relat√≥rio", "Visualiza√ß√µes", "Atividades Suspeitas"])
        
        # Aba de Pacotes
        with tabs[0]:
            st.markdown("<h2 class='sub-header'>Lista de Pacotes</h2>", unsafe_allow_html=True)
            
            # Mostramos os pacotes em uma tabela
            st.dataframe(
                df_to_display.drop(columns=['Raw']),
                use_container_width=True,
                hide_index=True
            )
            
            # Seletor de pacote
            selected_packet_num = st.selectbox(
                "Selecione um pacote para ver detalhes:",
                df_to_display['No.'].tolist()
            )
            
            if selected_packet_num:
                # Armazenamos o pacote selecionado na sess√£o
                st.session_state.selected_packet = df_to_display[df_to_display['No.'] == selected_packet_num].iloc[0]
        
        # Aba de Detalhes
        with tabs[1]:
            if hasattr(st.session_state, 'selected_packet'):
                packet = st.session_state.selected_packet
                
                st.markdown(f"<h2 class='sub-header'>Pacote #{packet['No.']}</h2>", unsafe_allow_html=True)
                
                # Mostramos as informa√ß√µes b√°sicas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<h3>Informa√ß√µes B√°sicas</h3>", unsafe_allow_html=True)
                    basic_info = {
                        "N√∫mero": packet['No.'],
                        "Tempo": packet['Time'],
                        "Origem": packet['Source'],
                        "Destino": packet['Destination'],
                        "Protocolo": packet['Protocol'],
                        "Tamanho": f"{packet['Length']} bytes",
                        "Info": packet['Info']
                    }
                    
                    for key, value in basic_info.items():
                        st.write(f"**{key}:** {value}")
                
                with col2:
                    st.markdown("<h3>Detalhes Avan√ßados</h3>", unsafe_allow_html=True)
                    
                    # Extra√≠mos detalhes avan√ßados do pacote
                    advanced_details = extract_advanced_packet_details(packet['Raw'])
                    
                    # Mostramos as se√ß√µes em expanders
                    for section, details in advanced_details.items():
                        with st.expander(section):
                            for key, value in details.items():
                                st.write(f"**{key}:** {value}")
                
                # Mostramos o pacote bruto
                with st.expander("Pacote Bruto"):
                    st.code(packet['Raw'], language='text')
        
        # Aba de An√°lise
        with tabs[2]:
            st.markdown("<h2 class='sub-header'>An√°lise de Tr√°fego</h2>", unsafe_allow_html=True)
            
            # Extra√≠mos estat√≠sticas
            statistics = extract_packet_statistics(df_to_display)
            
            # Mostramos estat√≠sticas b√°sicas
            st.markdown("<h3>Estat√≠sticas B√°sicas</h3>", unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total de Pacotes", statistics["total_packets"])
            
            with col2:
                st.metric("Tamanho M√©dio", f"{statistics['avg_packet_size']:.2f} bytes")
            
            with col3:
                st.metric("Taxa de Pacotes", f"{statistics['packet_rate']:.2f} pkt/s")
            
            # Mostramos distribui√ß√£o de protocolos
            st.markdown("<h3>Distribui√ß√£o de Protocolos</h3>", unsafe_allow_html=True)
            
            protocols_df = pd.DataFrame({
                'Protocolo': list(statistics["protocols"].keys()),
                'Quantidade': list(statistics["protocols"].values())
            })
            
            st.dataframe(protocols_df, use_container_width=True)
            
            # Mostramos TOP IPs
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("<h3>Top 10 IPs de Origem</h3>", unsafe_allow_html=True)
                
                sources_df = pd.DataFrame({
                    'IP': list(statistics["ip_sources"].keys()),
                    'Quantidade': list(statistics["ip_sources"].values())
                }).sort_values('Quantidade', ascending=False).head(10)
                
                st.dataframe(sources_df, use_container_width=True)
            
            with col2:
                st.markdown("<h3>Top 10 IPs de Destino</h3>", unsafe_allow_html=True)
                
                dests_df = pd.DataFrame({
                    'IP': list(statistics["ip_destinations"].keys()),
                    'Quantidade': list(statistics["ip_destinations"].values())
                }).sort_values('Quantidade', ascending=False).head(10)
                
                st.dataframe(dests_df, use_container_width=True)
            
            # Mostramos fluxos de comunica√ß√£o
            st.markdown("<h3>Principais Fluxos de Comunica√ß√£o</h3>", unsafe_allow_html=True)
            
            if not df_to_display.empty:
                flows = df_to_display.groupby(['Source', 'Destination']).size().reset_index(name='count')
                flows = flows.sort_values('count', ascending=False).head(10)
                flows.columns = ['Origem', 'Destino', 'Pacotes']
                
                st.dataframe(flows, use_container_width=True)
        
        # Aba de Relat√≥rio
        with tabs[3]:
            st.markdown("<h2 class='sub-header'>Relat√≥rio de An√°lise</h2>", unsafe_allow_html=True)
            
            if hasattr(st.session_state, 'analysis_report'):
                report = st.session_state.analysis_report
                
                # Resumo
                st.markdown("<h3>Resumo da Captura</h3>", unsafe_allow_html=True)
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Total de Pacotes", report["summary"]["total_packets"])
                
                with col2:
                    st.metric("Tamanho M√©dio", f"{report['summary']['avg_packet_size']}")
                
                with col3:
                    st.metric("Taxa de Pacotes", report["summary"]["packet_rate"])
                
                with col4:
                    if report["summary"]["protocol_distribution"]:
                        dominant_protocol = max(report["summary"]["protocol_distribution"].items(), key=lambda x: x[1])[0]
                        st.metric("Protocolo Dominante", dominant_protocol)
                
                # Per√≠odo de tempo
                st.info(f"Per√≠odo: {report['summary']['time_period']}")
                
                # Principais IPs
                st.markdown("<h3>Principais IPs</h3>", unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("<h4>Top Origens</h4>", unsafe_allow_html=True)
                    
                    for ip, count in list(report["top_ips"]["sources"].items())[:5]:
                        st.write(f"‚Ä¢ **{ip}**: {count} pacotes")
                
                with col2:
                    st.markdown("<h4>Top Destinos</h4>", unsafe_allow_html=True)
                    
                    for ip, count in list(report["top_ips"]["destinations"].items())[:5]:
                        st.write(f"‚Ä¢ **{ip}**: {count} pacotes")
                
                # Fluxos mais relevantes
                st.markdown("<h3>Principais Fluxos de Comunica√ß√£o</h3>", unsafe_allow_html=True)
                
                for flow in report["top_flows"][:5]:
                    st.write(f"‚Ä¢ **{flow['source']} ‚Üí {flow['destination']}**: {flow['packet_count']} pacotes")
                
                # Atividades suspeitas
                st.markdown("<h3>Atividades Suspeitas</h3>", unsafe_allow_html=True)
                
                if report["suspicious_activities"]:
                    for activity in report["suspicious_activities"]:
                        severity_color = {
                            "high": "#ff4444",
                            "medium": "#ffbb33",
                            "low": "#33b5e5"
                        }.get(activity.get("severity", "low"), "#33b5e5")
                        
                        st.markdown(
                            f"<div style='background-color: {severity_color}22; border-left: 5px solid {severity_color}; padding: 10px; margin-bottom: 10px;'>"
                            f"<strong>{activity['type']}</strong><br/>{activity['details']}"
                            f"</div>",
                            unsafe_allow_html=True
                        )
                else:
                    st.success("Nenhuma atividade suspeita detectada.")
                
                # Recomenda√ß√µes
                st.markdown("<h3>Recomenda√ß√µes</h3>", unsafe_allow_html=True)
                
                if report["recommendations"]:
                    for rec in report["recommendations"]:
                        severity_color = {
                            "high": "#ff4444",
                            "medium": "#ffbb33",
                            "low": "#33b5e5"
                        }.get(rec.get("severity", "low"), "#33b5e5")
                        
                        st.markdown(
                            f"<div style='background-color: {severity_color}22; border-left: 5px solid {severity_color}; padding: 10px; margin-bottom: 10px;'>"
                            f"<strong>{rec['title']}</strong><br/>{rec['description']}"
                            f"</div>",
                            unsafe_allow_html=True
                        )
                else:
                    st.info("Nenhuma recomenda√ß√£o espec√≠fica.")
                
                # Exportar relat√≥rio
                st.markdown("<h3>Exportar Relat√≥rio</h3>", unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    report_json = json.dumps(report, indent=2, default=str)
                    st.download_button(
                        "Baixar como JSON",
                        report_json,
                        "analise_wireshark.json",
                        "application/json"
                    )
                
                with col2:
                    # Criamos uma vers√£o markdown do relat√≥rio
                    report_md = f"""# Relat√≥rio de An√°lise de Captura de Pacotes

## Resumo
- **Total de Pacotes**: {report["summary"]["total_packets"]}
- **Per√≠odo**: {report['summary']['time_period']}
- **Taxa de Pacotes**: {report["summary"]["packet_rate"]}
- **Tamanho M√©dio**: {report['summary']['avg_packet_size']}

## Principais IPs

### Top Origens
{chr(10).join([f"- **{ip}**: {count} pacotes" for ip, count in list(report["top_ips"]["sources"].items())[:5]])}

### Top Destinos
{chr(10).join([f"- **{ip}**: {count} pacotes" for ip, count in list(report["top_ips"]["destinations"].items())[:5]])}

## Principais Fluxos de Comunica√ß√£o
{chr(10).join([f"- **{flow['source']} ‚Üí {flow['destination']}**: {flow['packet_count']} pacotes" for flow in report["top_flows"][:5]])}

## Atividades Suspeitas
{chr(10).join([f"- **{activity['type']}**: {activity['details']}" for activity in report["suspicious_activities"]]) if report["suspicious_activities"] else "Nenhuma atividade suspeita detectada."}

## Recomenda√ß√µes
{chr(10).join([f"- **{rec['title']}**: {rec['description']}" for rec in report["recommendations"]]) if report["recommendations"] else "Nenhuma recomenda√ß√£o espec√≠fica."}
"""
                    
                    st.download_button(
                        "Baixar como Markdown",
                        report_md,
                        "analise_wireshark.md",
                        "text/markdown"
                    )
            else:
                st.info("Clique em 'Gerar Relat√≥rio de An√°lise' no painel lateral para ver o relat√≥rio completo.")
        
        # Aba de Visualiza√ß√µes
        with tabs[4]:
            st.markdown("<h2 class='sub-header'>Visualiza√ß√µes</h2>", unsafe_allow_html=True)
            
            if hasattr(st.session_state, 'analysis_charts'):
                charts = st.session_state.analysis_charts
                
                # Distribui√ß√£o de protocolos
                if "protocol_distribution" in charts:
                    st.plotly_chart(charts["protocol_distribution"], use_container_width=True)
                
                # Top IPs
                col1, col2 = st.columns(2)
                
                with col1:
                    if "top_sources" in charts:
                        st.plotly_chart(charts["top_sources"], use_container_width=True)
                
                with col2:
                    if "top_destinations" in charts:
                        st.plotly_chart(charts["top_destinations"], use_container_width=True)
                
                # Pacotes ao longo do tempo
                if "packets_timeline" in charts:
                    st.plotly_chart(charts["packets_timeline"], use_container_width=True)
                
                # Tamanho dos pacotes
                if "packet_size_distribution" in charts:
                    st.plotly_chart(charts["packet_size_distribution"], use_container_width=True)
                
                # Grafo de comunica√ß√£o
                if "network_graph" in charts:
                    st.markdown("<h3>Grafo de Comunica√ß√£o de Rede</h3>", unsafe_allow_html=True)
                    st.plotly_chart(charts["network_graph"], use_container_width=True)
                    st.info("Este grafo mostra os principais fluxos de comunica√ß√£o na rede. O tamanho das linhas representa o volume de pacotes trocados.")
            else:
                st.info("Clique em 'Visualizar Estat√≠sticas' no painel lateral para gerar os gr√°ficos.")
        
        # Aba de Atividades Suspeitas
        with tabs[5]:
            st.markdown("<h2 class='sub-header'>Atividades Suspeitas</h2>", unsafe_allow_html=True)
            
            if hasattr(st.session_state, 'suspicious_activities'):
                activities = st.session_state.suspicious_activities
                
                if activities:
                    for activity in activities:
                        severity_color = {
                            "high": "#ff4444",
                            "medium": "#ffbb33",
                            "low": "#33b5e5"
                        }.get(activity.get("severity", "low"), "#33b5e5")
                        
                        st.markdown(
                            f"<div style='background-color: {severity_color}22; border-left: 5px solid {severity_color}; padding: 15px; margin-bottom: 15px; border-radius: 5px;'>"
                            f"<h3 style='margin-top: 0; color: {severity_color};'>{activity['type']}</h3>"
                            f"<p><strong>Detalhes:</strong> {activity['details']}</p>"
                            f"<p><strong>Severidade:</strong> <span style='color: {severity_color};'>{activity.get('severity', 'baixa').upper()}</span></p>"
                            f"</div>",
                            unsafe_allow_html=True
                        )
                        
                        # Mostrar pacotes relacionados se poss√≠vel
                        if 'source' in activity:
                            st.markdown(f"<h4>Pacotes relacionados a {activity['source']}</h4>", unsafe_allow_html=True)
                            related_packets = df_to_display[df_to_display['Source'] == activity['source']].head(10)
                            st.dataframe(related_packets.drop(columns=['Raw']), use_container_width=True)
                else:
                    st.success("Nenhuma atividade suspeita detectada na captura atual.")
                    
                    st.markdown("""
                    <div class="highlight">
                        <h3>Tipos de Atividades Suspeitas Detect√°veis</h3>
                        <ul>
                            <li><strong>Port Scanning</strong>: Tentativas de conex√£o a m√∫ltiplas portas de um mesmo destino.</li>
                            <li><strong>Packet Flood</strong>: Volume anormalmente alto de pacotes em um curto per√≠odo de tempo.</li>
                            <li><strong>Brute Force</strong>: M√∫ltiplas tentativas de conex√£o TCP com resets.</li>
                            <li><strong>Data Exfiltration</strong>: Transfer√™ncia de grandes volumes de dados para fora da rede.</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.info("Clique em 'Detectar Atividades Suspeitas' no painel lateral para realizar a an√°lise.")

# Componente de Tutorial Interativo
def interactive_tutorial():
    st.markdown("<h1 class='main-header'>Tutorial Interativo do Wireshark</h1>", unsafe_allow_html=True)
    
    # Se√ß√µes do tutorial
    tutorial_sections = [
        {
            "title": "Introdu√ß√£o ao Wireshark",
            "content": """
            <div class="highlight">
                <h3>O que √© o Wireshark?</h3>
                <p>O Wireshark √© uma das ferramentas de an√°lise de protocolo de rede mais poderosas e amplamente utilizadas no mundo. √â um software livre e de c√≥digo aberto que permite capturar e examinar interativamente o tr√°fego que circula em uma rede de computadores.</p>
                
                <h3>Para que serve?</h3>
                <p>O Wireshark √© usado por profissionais de rede, administradores de sistemas, especialistas em seguran√ßa, desenvolvedores e educadores para:</p>
                <ul>
                    <li>Diagnosticar problemas de rede</li>
                    <li>Examinar quest√µes de seguran√ßa</li>
                    <li>Depurar implementa√ß√µes de protocolos</li>
                    <li>Aprender protocolos de rede em detalhes</li>
                    <li>Analisar o desempenho da rede</li>
                </ul>
            </div>
            """
        },
        {
            "title": "Instala√ß√£o do Wireshark",
            "content": """
            <div class="highlight">
                <h3>Como instalar o Wireshark?</h3>
                
                <h4>Windows:</h4>
                <ol>
                    <li>Acesse o site oficial: <a href="https://www.wireshark.org/download.html" target="_blank">wireshark.org/download.html</a></li>
                    <li>Baixe o instalador Windows (64-bit)</li>
                    <li>Execute o instalador e siga as instru√ß√µes</li>
                    <li>Durante a instala√ß√£o, voc√™ pode escolher instalar o WinPcap ou Npcap, que s√£o necess√°rios para a captura de pacotes</li>
                </ol>
                
                <h4>macOS:</h4>
                <ol>
                    <li>Acesse o site oficial: <a href="https://www.wireshark.org/download.html" target="_blank">wireshark.org/download.html</a></li>
                    <li>Baixe o instalador macOS Intel ou ARM</li>
                    <li>Abra o arquivo .dmg e arraste o Wireshark para a pasta Applications</li>
                </ol>
                
                <h4>Linux (Ubuntu/Debian):</h4>
                <div class="terminal">
                sudo apt update<br>
                sudo apt install wireshark<br>
                # Durante a instala√ß√£o, voc√™ ser√° perguntado se usu√°rios n√£o-root podem capturar pacotes
                </div>
                
                <h4>Linux (Fedora/RHEL):</h4>
                <div class="terminal">
                sudo dnf install wireshark<br>
                sudo usermod -a -G wireshark $USER  # Adiciona seu usu√°rio ao grupo wireshark
                </div>
            </div>
            """
        },
        {
            "title": "Interface do Wireshark",
            "content": """
            <div class="highlight">
                <h3>Componentes principais da interface</h3>
                
                <h4>1. Barra de Ferramentas</h4>
                <p>Cont√©m bot√µes para iniciar/parar captura, abrir arquivos, aplicar filtros, etc.</p>
                
                <h4>2. Painel de Lista de Pacotes</h4>
                <p>Mostra cada pacote capturado, com informa√ß√µes como n√∫mero sequencial, timestamp, origem, destino, protocolo e informa√ß√µes b√°sicas.</p>
                
                <h4>3. Painel de Detalhes do Pacote</h4>
                <p>Apresenta os detalhes do pacote selecionado, organizados em uma √°rvore hier√°rquica que mostra cada camada do protocolo.</p>
                
                <h4>4. Painel de Bytes</h4>
                <p>Exibe os bytes brutos do pacote selecionado, tanto em formato hexadecimal quanto ASCII.</p>
                
                <h4>5. Barra de Status</h4>
                <p>Mostra informa√ß√µes sobre a captura atual, como o n√∫mero de pacotes exibidos e capturados, e a interface de captura.</p>
                
                <h4>6. Campo de Filtro de Exibi√ß√£o</h4>
                <p>Permite aplicar filtros complexos para mostrar apenas os pacotes de interesse.</p>
            </div>
            """
        },
        {
            "title": "Capturando Pacotes",
            "content": """
            <div class="highlight">
                <h3>Como iniciar uma captura</h3>
                
                <h4>Passo 1: Selecionar a Interface</h4>
                <p>Clique em "Capture" > "Options" ou no √≠cone de engrenagem na barra de ferramentas.</p>
                <p>Selecione a interface de rede pela qual deseja capturar o tr√°fego:</p>
                <ul>
                    <li><strong>Ethernet</strong>: para tr√°fego de rede cabeada</li>
                    <li><strong>Wi-Fi</strong>: para tr√°fego de rede sem fio</li>
                    <li><strong>Loopback</strong>: para tr√°fego local (127.0.0.1)</li>
                </ul>
                
                <h4>Passo 2: Configurar Op√ß√µes de Captura (opcional)</h4>
                <ul>
                    <li>Definir filtros de captura para limitar o que √© capturado</li>
                    <li>Configurar limites de tamanho de arquivo ou dura√ß√£o</li>
                    <li>Habilitar resolu√ß√£o de nomes (DNS, portas, etc.)</li>
                </ul>
                
                <h4>Passo 3: Iniciar a Captura</h4>
                <p>Clique em "Start" ou no bot√£o azul de tubar√£o na barra de ferramentas.</p>
                
                <h4>Passo 4: Parar a Captura</h4>
                <p>Clique no bot√£o vermelho "Stop" quando terminar de capturar.</p>
                
                <h3>Salvando capturas</h3>
                <p>Para salvar uma captura para an√°lise posterior:</p>
                <ol>
                    <li>Clique em "File" > "Save" ou "Save As"</li>
                    <li>Escolha o formato (geralmente .pcapng √© o padr√£o)</li>
                    <li>Selecione local e nome do arquivo</li>
                </ol>
            </div>
            """
        },
        {
            "title": "Filtros do Wireshark",
            "content": """
            <div class="highlight">
                <h3>Tipos de Filtros</h3>
                
                <h4>1. Filtros de Captura</h4>
                <p>Aplicados <strong>antes</strong> da captura para limitar os pacotes que s√£o capturados.</p>
                <p>Usa a sintaxe do BPF (Berkeley Packet Filter).</p>
                <p>Exemplos:</p>
                <div class="code-block">
                # Capturar apenas tr√°fego HTTP
                port 80
                
                # Capturar apenas tr√°fego de/para um IP espec√≠fico
                host 192.168.1.100
                
                # Capturar tr√°fego DNS
                port 53
                </div>
                
                <h4>2. Filtros de Exibi√ß√£o</h4>
                <p>Aplicados <strong>ap√≥s</strong> a captura para mostrar apenas os pacotes de interesse.</p>
                <p>Usa a sintaxe pr√≥pria do Wireshark, mais rica que os filtros de captura.</p>
                <p>Exemplos:</p>
                <div class="code-block">
                # Mostrar apenas pacotes HTTP
                http
                
                # Mostrar pacotes de um IP espec√≠fico
                ip.addr == 192.168.1.100
                
                # Mostrar pacotes com requisi√ß√µes GET do HTTP
                http.request.method == "GET"
                
                # Mostrar pacotes TCP com a flag SYN ativa
                tcp.flags.syn == 1
                
                # Combinando filtros (operadores l√≥gicos)
                http and ip.addr == 192.168.1.100
                
                # Excluindo pacotes
                !(arp or dns)
                </div>
            </div>
            """
        },
        {
            "title": "An√°lise de Protocolos Comuns",
            "content": """
            <div class="highlight">
                <h3>HTTP/HTTPS</h3>
                <p>Filtros √∫teis:</p>
                <div class="code-block">
                http                  # Todos os pacotes HTTP
                http.request          # Apenas requisi√ß√µes
                http.response         # Apenas respostas
                http.request.method   # Filtrar por m√©todo (GET, POST, etc.)
                http.response.code    # Filtrar por c√≥digo de status (200, 404, etc.)
                http.host contains "example.com"  # Filtrar por host
                </div>
                
                <h3>DNS</h3>
                <p>Filtros √∫teis:</p>
                <div class="code-block">
                dns                   # Todos os pacotes DNS
                dns.qry.name contains "google"  # Consultas com "google" no nome
                dns.flags.rcode != 0  # Respostas com erro
                dns.resp.name         # Filtrar por nome nas respostas
                </div>
                
                <h3>TCP</h3>
                <p>Filtros √∫teis:</p>
                <div class="code-block">
                tcp.port == 80        # Tr√°fego TCP na porta 80
                tcp.flags.syn == 1    # Pacotes com flag SYN (in√≠cio de conex√£o)
                tcp.flags.reset == 1  # Pacotes com flag RST (reset de conex√£o)
                tcp.analysis.retransmission  # Retransmiss√µes TCP
                tcp.window_size < 1000  # Tamanho de janela pequeno
                </div>
                
                <h3>ICMP</h3>
                <p>Filtros √∫teis:</p>
                <div class="code-block">
                icmp                   # Todos os pacotes ICMP
                icmp.type == 8         # Echo request (ping)
                icmp.type == 0         # Echo reply (resposta de ping)
                icmp.type == 3         # Destination unreachable
                </div>
            </div>
            """
        },
        {
            "title": "An√°lise de Seguran√ßa com Wireshark",
            "content": """
            <div class="highlight">
                <h3>Detectando atividades suspeitas</h3>
                
                <h4>1. Port Scanning</h4>
                <p>Sinais t√≠picos:</p>
                <ul>
                    <li>M√∫ltiplas tentativas de conex√£o de um √∫nico IP para v√°rias portas</li>
                    <li>Muitos pacotes SYN sem completar o three-way handshake</li>
                    <li>Sequ√™ncia de portas em ordem num√©rica</li>
                </ul>
                <p>Filtro √∫til:</p>
                <div class="code-block">
                tcp.flags.syn == 1 and tcp.flags.ack == 0
                </div>
                
                <h4>2. Ataques de For√ßa Bruta</h4>
                <p>Sinais t√≠picos:</p>
                <ul>
                    <li>M√∫ltiplas tentativas de login (ex: muitas requisi√ß√µes POST para p√°ginas de login)</li>
                    <li>Muitas conex√µes curtas para servi√ßos como SSH, FTP, etc.</li>
                </ul>
                <p>Filtro √∫til (SSH):</p>
                <div class="code-block">
                tcp.port == 22 and tcp.flags.syn == 1
                </div>
                
                <h4>3. ARP Poisoning</h4>
                <p>Sinais t√≠picos:</p>
                <ul>
                    <li>Muitas mensagens ARP sem solicita√ß√£o</li>
                    <li>Altera√ß√µes constantes de mapeamento MAC-IP</li>
                </ul>
                <p>Filtro √∫til:</p>
                <div class="code-block">
                arp.duplicate-address-detected or arp.duplicate-address-frame
                </div>
                
                <h4>4. DDoS Attacks</h4>
                <p>Sinais t√≠picos:</p>
                <ul>
                    <li>Volume anormalmente alto de tr√°fego</li>
                    <li>Muitas requisi√ß√µes similares de muitas fontes diferentes</li>
                </ul>
                <p>Filtro √∫til (SYN Flood):</p>
                <div class="code-block">
                tcp.flags.syn == 1 and tcp.flags.ack == 0 and ip.dst == [target_ip]
                </div>
                
                <h4>5. Exfiltra√ß√£o de Dados</h4>
                <p>Sinais t√≠picos:</p>
                <ul>
                    <li>Grandes volumes de dados enviados para fora da rede</li>
                    <li>Transfer√™ncias para dom√≠nios ou IPs incomuns</li>
                    <li>Dados codificados ou cifrados em protocolos normalmente n√£o cifrados</li>
                </ul>
                <p>Filtro √∫til:</p>
                <div class="code-block">
                (ip.dst != 192.168.0.0/16) and (ip.dst != 10.0.0.0/8) and (frame.len > 1000)
                </div>
            </div>
            """
        },
        {
            "title": "An√°lise Forense com Wireshark",
            "content": """
            <div class="highlight">
                <h3>T√©cnicas de An√°lise Forense de Rede</h3>
                
                <h4>1. Reconstru√ß√£o de Conversa√ß√µes</h4>
                <p>O Wireshark permite reconstruir conversa√ß√µes completas de protocolos como HTTP, SMTP e outros.</p>
                <p>Para reconstruir:</p>
                <ol>
                    <li>Selecione um pacote da conversa√ß√£o</li>
                    <li>Clique com o bot√£o direito e escolha "Follow" (ex: "Follow TCP Stream")</li>
                    <li>Analise a conversa√ß√£o completa na janela que aparecer</li>
                </ol>
                
                <h4>2. Extra√ß√£o de Arquivos</h4>
                <p>Voc√™ pode extrair arquivos transferidos por protocolos como HTTP, FTP ou SMB:</p>
                <ol>
                    <li>V√° para "File" > "Export Objects"</li>
                    <li>Selecione o protocolo (HTTP, SMB, etc.)</li>
                    <li>Escolha os arquivos que deseja salvar</li>
                </ol>
                
                <h4>3. Linha do Tempo de Eventos</h4>
                <p>Para criar uma linha do tempo de atividades:</p>
                <ol>
                    <li>Use o campo "Time" para ordenar cronologicamente</li>
                    <li>Aplique filtros relevantes para eventos espec√≠ficos</li>
                    <li>Use "Statistics" > "I/O Graph" para visualizar padr√µes de tr√°fego ao longo do tempo</li>
                </ol>
                
                <h4>4. An√°lise de Anomalias</h4>
                <p>Identifique comportamentos an√¥malos:</p>
                <ul>
                    <li>Picos repentinos de tr√°fego (use "Statistics" > "I/O Graph")</li>
                    <li>Protocolos em portas n√£o padr√£o (ex: "tcp.port == 80 and !http")</li>
                    <li>Erros frequentes ou retransmiss√µes (use "tcp.analysis.flags")</li>
                </ul>
                
                <h4>5. Documenta√ß√£o</h4>
                <p>Dicas para documentar descobertas:</p>
                <ul>
                    <li>Use "File" > "Print" para documentar pacotes importantes</li>
                    <li>Fa√ßa capturas de tela de an√°lises e gr√°ficos relevantes</li>
                    <li>Exporte estat√≠sticas via "Statistics" > "Summary" ou outros relat√≥rios</li>
                    <li>Crie anota√ß√µes detalhadas com timestamps, IPs e portas relevantes</li>
                    <li>Documente a cadeia de eventos em ordem cronol√≥gica</li>
                </ul>
            </div>
            """
        },
        {
            "title": "Exerc√≠cios Pr√°ticos",
            "content": """
            <div class="highlight">
                <h3>Exerc√≠cios para Iniciantes</h3>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 1: An√°lise de Tr√°fego HTTP</h4>
                    <p><strong>Objetivo:</strong> Capturar e analisar uma sess√£o HTTP simples.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Inicie uma captura no Wireshark</li>
                        <li>Acesse um site que use HTTP (n√£o HTTPS) em seu navegador</li>
                        <li>Pare a captura ap√≥s carregar a p√°gina</li>
                        <li>Use o filtro "http" para ver apenas o tr√°fego HTTP</li>
                        <li>Identifique as requisi√ß√µes GET e as respostas do servidor</li>
                        <li>Reconstrua a comunica√ß√£o usando "Follow HTTP Stream"</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Quais cabe√ßalhos HTTP s√£o enviados pelo navegador?</li>
                        <li>Qual o c√≥digo de status das respostas do servidor?</li>
                        <li>Consegue identificar o conte√∫do HTML da p√°gina?</li>
                    </ol>
                </div>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 2: An√°lise de DNS</h4>
                    <p><strong>Objetivo:</strong> Entender como funcionam as consultas DNS.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Inicie uma captura no Wireshark</li>
                        <li>Abra um terminal/prompt de comando</li>
                        <li>Execute comandos nslookup ou dig para consultar dom√≠nios (ex: nslookup google.com)</li>
                        <li>Pare a captura ap√≥s algumas consultas</li>
                        <li>Use o filtro "dns" para isolar o tr√°fego DNS</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Quais s√£o os componentes de uma consulta DNS?</li>
                        <li>Como identificar perguntas e respostas DNS?</li>
                        <li>Quais tipos de registros DNS voc√™ consegue identificar?</li>
                    </ol>
                </div>
                
                <h3>Exerc√≠cios Intermedi√°rios</h3>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 3: An√°lise de Three-way Handshake</h4>
                    <p><strong>Objetivo:</strong> Entender o estabelecimento de conex√µes TCP.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Inicie uma captura no Wireshark</li>
                        <li>Conecte-se a um servidor (acesse um site ou use telnet/nc para conectar a uma porta)</li>
                        <li>Pare a captura ap√≥s estabelecer a conex√£o</li>
                        <li>Use filtros para isolar a comunica√ß√£o TCP com o servidor</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Identifique os pacotes SYN, SYN-ACK e ACK que formam o three-way handshake</li>
                        <li>Quais n√∫meros de sequ√™ncia e reconhecimento s√£o usados?</li>
                        <li>Quais op√ß√µes TCP est√£o presentes nos pacotes?</li>
                    </ol>
                </div>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 4: Detec√ß√£o de Port Scanning</h4>
                    <p><strong>Objetivo:</strong> Reconhecer padr√µes de port scanning em capturas.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Baixe e abra no Wireshark uma captura pr√©-configurada contendo um port scan</li>
                        <li>Alternativamente, use uma VM ou ambiente de laborat√≥rio controlado para simular um port scan com ferramentas como nmap</li>
                        <li>Analise o tr√°fego para identificar o padr√£o de port scanning</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Qual tipo de port scan foi realizado (SYN scan, connect scan, etc.)?</li>
                        <li>Quais portas foram escaneadas?</li>
                        <li>Como voc√™ pode detectar port scans usando filtros do Wireshark?</li>
                    </ol>
                </div>
                
                <h3>Exerc√≠cios Avan√ßados</h3>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 5: An√°lise de Tr√°fego Malicioso</h4>
                    <p><strong>Objetivo:</strong> Identificar indicadores de comprometimento em capturas de rede.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Baixe uma captura PCAP de exemplo contendo tr√°fego malicioso (dispon√≠veis em reposit√≥rios educacionais)</li>
                        <li>Analise a captura para identificar comportamentos an√¥malos</li>
                        <li>Documente suas descobertas como se estivesse realizando uma investiga√ß√£o forense</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Quais indicadores de comprometimento voc√™ consegue identificar?</li>
                        <li>Existe comunica√ß√£o com IPs ou dom√≠nios conhecidamente maliciosos?</li>
                        <li>H√° padr√µes de comunica√ß√£o suspeitos (como beaconing ou exfiltra√ß√£o de dados)?</li>
                    </ol>
                </div>
                
                <div class="challenge-card">
                    <h4>Exerc√≠cio 6: Decodifica√ß√£o e An√°lise de Protocolos Cifrados</h4>
                    <p><strong>Objetivo:</strong> Aprender a decodificar tr√°fego TLS/SSL quando as chaves est√£o dispon√≠veis.</p>
                    <p><strong>Instru√ß√µes:</strong></p>
                    <ol>
                        <li>Configure um ambiente controlado com um servidor web que use HTTPS</li>
                        <li>Configure o navegador para exportar as chaves de sess√£o (SSLKEYLOGFILE)</li>
                        <li>Capture o tr√°fego HTTPS</li>
                        <li>Configure o Wireshark para usar o arquivo de log de chaves para decodificar o tr√°fego</li>
                    </ol>
                    <p><strong>Perguntas:</strong></p>
                    <ol>
                        <li>Como o TLS protege a comunica√ß√£o? Identifique as fases do handshake TLS</li>
                        <li>Que informa√ß√µes voc√™ consegue obter ap√≥s decodificar o tr√°fego?</li>
                        <li>Quais aplica√ß√µes forenses tem esta t√©cnica de decodifica√ß√£o?</li>
                    </ol>
                </div>
            </div>
            """
        },
        {
            "title": "Casos de Estudo",
            "content": """
            <div class="highlight">
                <h3>Caso de Estudo 1: An√°lise de Ataque DDoS</h3>
                
                <h4>Cen√°rio:</h4>
                <p>Um servidor web apresentou lentid√£o severa durante 30 minutos. A equipe de TI suspeita de um ataque DDoS e capturou o tr√°fego durante o incidente.</p>
                
                <h4>Objetivos:</h4>
                <ol>
                    <li>Confirmar se houve um ataque DDoS</li>
                    <li>Identificar o tipo de ataque (SYN flood, HTTP flood, etc.)</li>
                    <li>Determinar a origem do ataque</li>
                    <li>Recomendar medidas de mitiga√ß√£o</li>
                </ol>
                
                <h4>Abordagem de An√°lise:</h4>
                <ol>
                    <li>Analisar o volume de tr√°fego ao longo do tempo usando "Statistics" > "I/O Graph"</li>
                    <li>Identificar os IPs que geraram mais tr√°fego usando "Statistics" > "Endpoints"</li>
                    <li>Examinar padr√µes nos pacotes para identificar o tipo de ataque</li>
                    <li>Usar filtros espec√≠ficos para isolar o tr√°fego malicioso</li>
                </ol>
                
                <h4>Resultados Esperados:</h4>
                <p>Um relat√≥rio detalhando a natureza do ataque, evid√™ncias coletadas, e recomenda√ß√µes de mitiga√ß√£o.</p>
                
                <h3>Caso de Estudo 2: Investiga√ß√£o de Vazamento de Dados</h3>
                
                <h4>Cen√°rio:</h4>
                <p>Uma empresa suspeita que informa√ß√µes confidenciais est√£o sendo exfiltradas da rede corporativa. Capturas de rede foram coletadas durante um per√≠odo de uma semana.</p>
                
                <h4>Objetivos:</h4>
                <ol>
                    <li>Identificar transfer√™ncias suspeitas de dados</li>
                    <li>Determinar quais esta√ß√µes de trabalho est√£o envolvidas</li>
                    <li>Avaliar que tipo de dados podem ter sido exfiltrados</li>
                    <li>Documentar a linha do tempo da atividade suspeita</li>
                </ol>
                
                <h4>Abordagem de An√°lise:</h4>
                <ol>
                    <li>Filtrar transfer√™ncias grandes de dados para destinos externos √† rede</li>
                    <li>Examinar o uso de servi√ßos n√£o autorizados ou canais de comunica√ß√£o n√£o padr√£o</li>
                    <li>Analisar comunica√ß√µes em hor√°rios incomuns</li>
                    <li>Procurar por padr√µes de comunica√ß√£o regulares com servidores externos n√£o reconhecidos</li>
                </ol>
                
                <h4>Resultados Esperados:</h4>
                <p>Um relat√≥rio forense detalhando as evid√™ncias de exfiltra√ß√£o, m√©todos utilizados, dados comprometidos, e cronologia dos eventos.</p>
                
                <h3>Caso de Estudo 3: Troubleshooting de Problemas de Rede</h3>
                
                <h4>Cen√°rio:</h4>
                <p>Usu√°rios de uma aplica√ß√£o web interna relatam conex√µes lentas e timeouts intermitentes. A equipe de TI precisa identificar a causa raiz do problema.</p>
                
                <h4>Objetivos:</h4>
                <ol>
                    <li>Identificar se o problema est√° na rede, no servidor, ou na aplica√ß√£o</li>
                    <li>Determinar padr√µes de ocorr√™ncia dos problemas</li>
                    <li>Quantificar o impacto (lat√™ncia, perda de pacotes, etc.)</li>
                    <li>Recomendar solu√ß√µes</li>
                </ol>
                
                <h4>Abordagem de An√°lise:</h4>
                <ol>
                    <li>Analisar tempos de resposta usando "Statistics" > "TCP Stream Graph" > "Round Trip Time"</li>
                    <li>Verificar retransmiss√µes e timeouts usando filtros como "tcp.analysis.retransmission"</li>
                    <li>Examinar os tamanhos de janela TCP e ajustes de congestionamento</li>
                    <li>Analisar correla√ß√µes entre problemas e per√≠odos espec√≠ficos</li>
                </ol>
                
                <h4>Resultados Esperados:</h4>
                <p>Um diagn√≥stico t√©cnico identificando a causa raiz do problema e recomenda√ß√µes espec√≠ficas para resolver o problema.</p>
            </div>
            """
        },
        {
            "title": "Recursos e Videoaulas",
            "content": """
            <div class="highlight">
                <h3>Videoaulas Recomendadas</h3>
                
                <h4>Introdu√ß√£o ao Wireshark:</h4>
                <ul>
                    <li><a href="https://www.youtube.com/watch?v=lb1Dw0elw0Q" target="_blank">Wireshark Tutorial for Beginners</a></li>
                    <li><a href="https://www.youtube.com/watch?v=4_gustyM9Gs" target="_blank">Wireshark Essentials: Capturando e Analisando Tr√°fego</a> (Em Portugu√™s)</li>
                    <li><a href="https://www.youtube.com/watch?v=TkCSr30UojM" target="_blank">Wireshark 101: Instala√ß√£o e Interface</a></li>
                </ul>
                
                <h4>An√°lise de Protocolos:</h4>
                <ul>
                    <li><a href="https://www.youtube.com/watch?v=0S-ZUUyZhSg" target="_blank">An√°lise de Protocolos HTTP com Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=yDDcYRSlrp8" target="_blank">Entendendo o TCP Handshake com Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=Gdj_D6_P4HQ" target="_blank">DNS em Detalhes com Wireshark</a></li>
                </ul>
                
                <h4>Seguran√ßa e Forense:</h4>
                <ul>
                    <li><a href="https://www.youtube.com/watch?v=jU_V4i4TX2g" target="_blank">Detectando Ataques com Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=5K2mnjNnV7A" target="_blank">Forense de Rede com Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=Kp5XQbz3IIg" target="_blank">An√°lise de Malware com Wireshark</a></li>
                </ul>
                
                <h4>Avan√ßado:</h4>
                <ul>
                    <li><a href="https://www.youtube.com/watch?v=gRcJBCdNbVo" target="_blank">Decodificando Tr√°fego TLS/SSL no Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=UXAHvwouk6Q" target="_blank">Filtros Avan√ßados no Wireshark</a></li>
                    <li><a href="https://www.youtube.com/watch?v=UeAKTjx_eKA" target="_blank">An√°lise de Performance com Wireshark</a></li>
                </ul>
                
                <h3>Recursos Adicionais</h3>
                
                <h4>Livros Recomendados:</h4>
                <ul>
                    <li>"Wireshark Network Analysis" por Laura Chappell</li>
                    <li>"Practical Packet Analysis" por Chris Sanders</li>
                    <li>"Network Forensics: Tracking Hackers through Cyberspace" por Sherri Davidoff e Jonathan Ham</li>
                </ul>
                
                <h4>Websites e Documenta√ß√£o:</h4>
                <ul>
                    <li><a href="https://www.wireshark.org/docs/" target="_blank">Documenta√ß√£o Oficial do Wireshark</a></li>
                    <li><a href="https://wiki.wireshark.org/" target="_blank">Wiki do Wireshark</a></li>
                    <li><a href="https://packetlife.net/library/cheat-sheets/" target="_blank">Cheat Sheets de Protocolos (Packet Life)</a></li>
                </ul>
                
                <h4>Capturas de Exemplo:</h4>
                <ul>
                    <li><a href="https://wiki.wireshark.org/SampleCaptures" target="_blank">Capturas de Exemplo do Wireshark</a></li>
                    <li><a href="https://www.malware-traffic-analysis.net/" target="_blank">Malware Traffic Analysis</a></li>
                </ul>
                
                <h4>Cursos Online:</h4>
                <ul>
                    <li><a href="https://www.coursera.org" target="_blank">Coursera - Network Security & Database Vulnerabilities</a></li>
                    <li><a href="https://www.udemy.com" target="_blank">Udemy - Wireshark: Packet Analysis and Ethical Hacking</a></li>
                </ul>
            </div>
            """
        }
    ]
    
    # Sele√ß√£o de se√ß√£o
    st.markdown("<h2 class='sub-header'>Escolha um t√≥pico:</h2>", unsafe_allow_html=True)
    
    section_titles = [section["title"] for section in tutorial_sections]
    selected_section = st.selectbox("", section_titles)
    
    # Exibe a se√ß√£o selecionada
    selected_index = section_titles.index(selected_section)
    st.markdown(tutorial_sections[selected_index]["content"], unsafe_allow_html=True)
    
    # Controles de navega√ß√£o
    st.markdown("<div style='margin-top: 30px;'></div>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col1:
        if selected_index > 0:
            if st.button("‚Üê Anterior"):
                st.session_state.selected_section = section_titles[selected_index - 1]
                st.rerun()
    
    with col3:
        if selected_index < len(section_titles) - 1:
            if st.button("Pr√≥ximo ‚Üí"):
                st.session_state.selected_section = section_titles[selected_index + 1]
                st.rerun()

# Componente de Roadmap de Estudos
def study_roadmap():
    st.markdown("<h1 class='main-header'>Roadmap de Estudos em An√°lise de Tr√°fego com Wireshark</h1>", unsafe_allow_html=True)
    
    # Introdu√ß√£o
    st.markdown("""
    <div class="highlight">
        <p>Este roadmap de estudos fornece um caminho estruturado para dominar a an√°lise de tr√°fego de rede com o Wireshark, desde o n√≠vel iniciante at√© o especialista. Cada n√≠vel inclui conceitos, habilidades, ferramentas complementares e projetos pr√°ticos.</p>
        
        <p>Recomendamos que voc√™ siga o roadmap sequencialmente, mas sinta-se √† vontade para adaptar conforme seu conhecimento pr√©vio e objetivos espec√≠ficos.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # N√≠veis do Roadmap
    levels = [
        {
            "title": "N√≠vel 1: Fundamentos (2-4 semanas)",
            "concepts": [
                "Conceitos b√°sicos de redes (modelos OSI e TCP/IP)",
                "Estrutura de pacotes e quadros",
                "Endere√ßamento IP e portas TCP/UDP",
                "Protocolos fundamentais (Ethernet, IP, TCP, UDP)",
                "Instala√ß√£o e configura√ß√£o do Wireshark"
            ],
            "skills": [
                "Iniciar e parar capturas",
                "Navegar pela interface do Wireshark",
                "Aplicar filtros b√°sicos",
                "Examinar pacotes individuais",
                "Interpretar campos b√°sicos de pacotes"
            ],
            "tools": [
                "Wireshark",
                "Ping",
                "Traceroute/tracert",
                "Nslookup/dig"
            ],
            "projects": [
                "Analisar tr√°fego de navega√ß√£o web b√°sica",
                "Capturar e examinar pings e consultas DNS",
                "Identificar o three-way handshake do TCP",
                "Monitorar tr√°fego de aplicativo espec√≠fico"
            ]
        },
        {
            "title": "N√≠vel 2: An√°lise de Protocolos (4-6 semanas)",
            "concepts": [
                "Protocolos de aplica√ß√£o (HTTP, DNS, DHCP, SMTP)",
                "Encapsulamento de protocolos",
                "Resolu√ß√£o de nomes e servi√ßos",
                "Cabe√ßalhos e op√ß√µes TCP/IP detalhados",
                "An√°lise de conversa√ß√£o e stream"
            ],
            "skills": [
                "Filtros de exibi√ß√£o avan√ßados",
                "Seguir streams TCP/UDP",
                "An√°lise estat√≠stica b√°sica",
                "Exportar objetos de protocolos",
                "Usar perfis e colora√ß√£o de pacotes"
            ],
            "tools": [
                "Filtros de express√£o do Wireshark",
                "Tcpdump (b√°sico)",
                "Netcat/nc",
                "Ferramentas web de teste como curl"
            ],
            "projects": [
                "Analisar uma autentica√ß√£o HTTP completa",
                "Capturar e interpretar tr√°fego DHCP completo",
                "Examinar negocia√ß√£o TLS/SSL",
                "Documentar o fluxo completo de transa√ß√µes de aplica√ß√µes"
            ]
        },
        {
            "title": "N√≠vel 3: Troubleshooting e Performance (4-6 semanas)",
            "concepts": [
                "An√°lise de lat√™ncia e throughput",
                "Diagn√≥stico de problemas de conectividade",
                "Reconhecimento de padr√µes de tr√°fego",
                "Retransmiss√µes TCP e controle de fluxo",
                "Fragmenta√ß√£o e MTU"
            ],
            "skills": [
                "Interpretar gr√°ficos e estat√≠sticas",
                "Identificar gargalos de performance",
                "Detectar perda de pacotes e lat√™ncia",
                "Usar ferramentas de an√°lise Expert Info",
                "Personalizar a interface para troubleshooting"
            ],
            "tools": [
                "Ferramentas de an√°lise estat√≠stica do Wireshark",
                "Iperf/jperf",
                "MTR/WinMTR",
                "Tcpdump (avan√ßado)"
            ],
            "projects": [
                "Diagnosticar um problema de lat√™ncia em rede",
                "Analisar impacto de diferentes tamanhos de MTU",
                "Comparar performance entre diferentes servi√ßos",
                "Criar um relat√≥rio de troubleshooting completo"
            ]
        },
        {
            "title": "N√≠vel 4: Seguran√ßa e Forense (6-8 semanas)",
            "concepts": [
                "Reconhecimento de padr√µes de ataque",
                "T√©cnicas de evas√£o e tunelamento",
                "An√°lise de malware baseada em rede",
                "Exfiltra√ß√£o de dados",
                "Protocolos cifrados e t√©cnicas de decodifica√ß√£o"
            ],
            "skills": [
                "Detectar scans e varreduras",
                "Identificar anomalias de tr√°fego",
                "Reconstruir sess√µes e artefatos",
                "Extrair indicadores de comprometimento (IOCs)",
                "Decodificar tr√°fego TLS/SSL com chaves dispon√≠veis"
            ],
            "tools": [
                "Ferramentas de an√°lise de seguran√ßa do Wireshark",
                "Tshark",
                "NetworkMiner",
                "Suricata/Snort (b√°sico)",
                "Pacotes PCAP de malware"
            ],
            "projects": [
                "An√°lise de um ataque de for√ßa bruta ou DDoS",
                "Detec√ß√£o de exfiltra√ß√£o de dados",
                "Reconstru√ß√£o de arquivos transferidos",
                "An√°lise forense completa de um incidente"
            ]
        },
        {
            "title": "N√≠vel 5: Especializa√ß√£o e Automa√ß√£o (8+ semanas)",
            "concepts": [
                "An√°lise program√°tica de pacotes",
                "Integra√ß√£o com outras ferramentas",
                "An√°lise de protocolos propriet√°rios",
                "Dissectores personalizados",
                "Ambientes de captura distribu√≠da"
            ],
            "skills": [
                "Scripting com tshark e ferramentas de linha de comando",
                "Desenvolver filtros e dissectores personalizados",
                "Automa√ß√£o de an√°lise com Python/Lua",
                "Integra√ß√£o com sistemas de monitoramento",
                "T√©cnicas de visualiza√ß√£o avan√ßada"
            ],
            "tools": [
                "Tshark (avan√ßado)",
                "Python com pyshark/scapy",
                "Lua para dissectores",
                "Elasticsearch/Kibana para visualiza√ß√£o",
                "Ambientes de rede virtualizada"
            ],
            "projects": [
                "Desenvolver um dissector para protocolo personalizado",
                "Criar sistema automatizado de detec√ß√£o de anomalias",
                "Construir dashboard de visualiza√ß√£o de tr√°fego",
                "Implementar sistema de captura e an√°lise distribu√≠da"
            ]
        }
    ]
    
    # Exibi√ß√£o do Roadmap
    for level in levels:
        with st.expander(level["title"], expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("<h3>Conceitos-chave</h3>", unsafe_allow_html=True)
                for concept in level["concepts"]:
                    st.markdown(f"‚Ä¢ {concept}")
                
                st.markdown("<h3>Ferramentas</h3>", unsafe_allow_html=True)
                for tool in level["tools"]:
                    st.markdown(f"‚Ä¢ {tool}")
            
            with col2:
                st.markdown("<h3>Habilidades a desenvolver</h3>", unsafe_allow_html=True)
                for skill in level["skills"]:
                    st.markdown(f"‚Ä¢ {skill}")
                
                st.markdown("<h3>Projetos pr√°ticos</h3>", unsafe_allow_html=True)
                for project in level["projects"]:
                    st.markdown(f"‚Ä¢ {project}")
    
    # Certifica√ß√µes Relevantes
    st.markdown("<h2 class='sub-header'>Certifica√ß√µes Relevantes</h2>", unsafe_allow_html=True)
    
    certifications = [
        {
            "name": "Wireshark Certified Network Analyst (WCNA)",
            "description": "Certifica√ß√£o oficial do Wireshark que valida conhecimentos avan√ßados em an√°lise de protocolos e troubleshooting."
        },
        {
            "name": "CompTIA Network+",
            "description": "Fornece fundamentos s√≥lidos de redes que s√£o essenciais para an√°lise eficaz com Wireshark."
        },
        {
            "name": "Cisco CCNA",
            "description": "Oferece conhecimento aprofundado de redes Cisco e troubleshooting que complementa a an√°lise com Wireshark."
        },
        {
            "name": "SANS GIAC Certified Forensic Analyst (GCFA)",
            "description": "Foco em an√°lise forense digital, incluindo componentes significativos de an√°lise de tr√°fego de rede."
        },
        {
            "name": "Offensive Security Certified Professional (OSCP)",
            "description": "Inclui componentes de an√°lise de tr√°fego de rede do ponto de vista ofensivo."
        }
    ]
    
    for cert in certifications:
        st.markdown(f"""
        <div style='background-color: #f5f5f5; padding: 10px; border-radius: 5px; margin-bottom: 10px;'>
            <strong>{cert['name']}</strong><br/>
            {cert['description']}
        </div>
        """, unsafe_allow_html=True)
    
    # Dicas de Estudo
    st.markdown("<h2 class='sub-header'>Dicas de Estudo Efetivo</h2>", unsafe_allow_html=True)
    
    st.markdown("""
    <div class="highlight">
        <ol>
            <li><strong>Pratique regularmente</strong>: An√°lise de pacotes √© uma habilidade pr√°tica. Dedique tempo regular para capturar e analisar tr√°fego.</li>
            <li><strong>Crie um laborat√≥rio</strong>: Configure um ambiente controlado usando VMs ou containers para gerar e capturar diferentes tipos de tr√°fego.</li>
            <li><strong>Estude capturas reais</strong>: Baixe e analise capturas PCAP de reposit√≥rios online para ver tr√°fego real diversificado.</li>
            <li><strong>Participe de comunidades</strong>: Junte-se a f√≥runs como o da Wireshark, o Stack Exchange Network Engineering ou grupos no Reddit.</li>
            <li><strong>Desafios pr√°ticos</strong>: Participe de CTFs (Capture The Flag) com componentes de an√°lise de rede ou desafios PCAP.</li>
            <li><strong>Documente seu aprendizado</strong>: Mantenha anota√ß√µes detalhadas, bibliotecas de filtros √∫teis, e capturas interessantes para refer√™ncia futura.</li>
            <li><strong>Ensine outros</strong>: Explicar conceitos para outras pessoas solidifica seu pr√≥prio conhecimento. Considere criar tutoriais ou participar de mentorias.</li>
            <li><strong>Aplique em cen√°rios reais</strong>: Se poss√≠vel, utilize o Wireshark em situa√ß√µes reais de trabalho ou projetos pessoais.</li>
            <li><strong>Estude al√©m do Wireshark</strong>: Aprofunde-se em redes, protocolos e seguran√ßa para contextualizar o que voc√™ v√™ nas capturas.</li>
            <li><strong>Tenha consist√™ncia</strong>: √â melhor estudar 30 minutos diariamente do que 5 horas em um √∫nico dia por semana.</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)

# Componente de Desafios Pr√°ticos
def practical_challenges():
    st.markdown("<h1 class='main-header'>Desafios Pr√°ticos de An√°lise com Wireshark</h1>", unsafe_allow_html=True)
    
    # Categorias de desafios
    challenge_categories = ["Fundamentos", "An√°lise de Protocolos", "Seguran√ßa", "Forense", "Troubleshooting", "Avan√ßado"]
    selected_category = st.selectbox("Selecione uma categoria:", challenge_categories)
    
    # Lista de desafios por categoria
    challenges = {
        "Fundamentos": [
            {
                "title": "Desafio 1: TCP Handshake Explorer",
                "description": "Neste desafio, voc√™ analisar√° um arquivo PCAP contendo m√∫ltiplas conex√µes TCP. Sua tarefa √© identificar todos os three-way handshakes e documentar os n√∫meros de sequ√™ncia iniciais utilizados.",
                "difficulty": "Iniciante",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Identifique todos os pacotes SYN para encontrar tentativas de conex√£o",
                    "Para cada conex√£o, localize os pacotes SYN, SYN-ACK e ACK que formam o handshake",
                    "Documente os endere√ßos IP, portas, e n√∫meros de sequ√™ncia iniciais",
                    "Verifique se h√° conex√µes que n√£o seguem o padr√£o normal"
                ],
                "hints": [
                    "Use o filtro 'tcp.flags.syn==1' para encontrar todos os pacotes SYN",
                    "Utilize a coluna 'Info' para identificar os flags TCP",
                    "Observe a coluna 'Seq' para os n√∫meros de sequ√™ncia"
                ],
                "questions": [
                    "Quantas conex√µes TCP completas existem na captura?",
                    "Todas as tentativas de conex√£o foram bem-sucedidas?",
                    "Quais s√£o os padr√µes nos n√∫meros de sequ√™ncia iniciais?"
                ],
                "downloadable_files": ["tcp_handshakes.pcap"]
            },
            {
                "title": "Desafio 2: An√°lise de Consultas DNS",
                "description": "Este desafio foca na compreens√£o do protocolo DNS. Voc√™ analisar√° uma captura contendo diversas consultas e respostas DNS, identificando diferentes tipos de registros e padr√µes de consulta.",
                "difficulty": "Iniciante",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Use filtros para isolar apenas o tr√°fego DNS",
                    "Identifique diferentes tipos de consultas (A, AAAA, MX, NS, etc.)",
                    "Analise as respostas e os tempos de resposta",
                    "Identifique consultas recursivas vs. iterativas"
                ],
                "hints": [
                    "Use o filtro 'dns' para isolar tr√°fego DNS",
                    "Examine os campos 'Info' para ver tipos de consulta",
                    "Observe a hierarquia de consultas DNS para identificar padr√µes"
                ],
                "questions": [
                    "Quais s√£o os tipos de registros DNS solicitados na captura?",
                    "H√° consultas que n√£o receberam respostas? Por qu√™?",
                    "Qual √© o TTL m√©dio das respostas recebidas?"
                ],
                "downloadable_files": ["dns_queries.pcap"]
            }
        ],
        "An√°lise de Protocolos": [
            {
                "title": "Desafio 3: Decodifica√ß√£o de Sess√£o HTTP",
                "description": "Neste desafio, voc√™ analisar√° uma sess√£o HTTP completa, incluindo requisi√ß√µes, respostas, redirecionamentos e transfer√™ncia de arquivos. O objetivo √© reconstruir a navega√ß√£o do usu√°rio e o conte√∫do acessado.",
                "difficulty": "Intermedi√°rio",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Isole o tr√°fego HTTP",
                    "Reconstrua a sequ√™ncia de navega√ß√£o do usu√°rio",
                    "Extraia os objetos HTTP (imagens, documentos, etc.)",
                    "Analise os cabe√ßalhos HTTP para obter informa√ß√µes sobre o cliente e servidor"
                ],
                "hints": [
                    "Use 'http' como filtro b√°sico",
                    "Utilize 'Follow HTTP Stream' para visualizar conversa√ß√µes completas",
                    "Verifique File > Export Objects > HTTP para extrair arquivos"
                ],
                "questions": [
                    "Qual navegador o usu√°rio estava utilizando?",
                    "Quais websites foram visitados, em ordem?",
                    "Houve algum upload de arquivo? Se sim, o que foi enviado?",
                    "Algum cookie foi definido durante a navega√ß√£o?"
                ],
                "downloadable_files": ["http_session.pcap"]
            },
            {
                "title": "Desafio 4: An√°lise de Protocolo DHCP",
                "description": "Este desafio foca no protocolo DHCP. Voc√™ analisar√° uma captura que cont√©m m√∫ltiplas solicita√ß√µes e renova√ß√µes DHCP, identificando as fases do processo e configura√ß√µes fornecidas.",
                "difficulty": "Intermedi√°rio",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Isole o tr√°fego DHCP",
                    "Identifique o processo DORA (Discover, Offer, Request, Acknowledge)",
                    "Documente os endere√ßos IP atribu√≠dos, servidores DNS, e outros par√¢metros",
                    "Observe os tempos de lease e renova√ß√µes"
                ],
                "hints": [
                    "Use 'dhcp' como filtro b√°sico",
                    "Observe o campo 'Info' para identificar os diferentes tipos de mensagens",
                    "Examine o conte√∫do detalhado de cada pacote para ver as op√ß√µes DHCP"
                ],
                "questions": [
                    "Quantos clientes solicitaram endere√ßos IP?",
                    "Qual √© o tempo de lease configurado?",
                    "Que informa√ß√µes adicionais s√£o fornecidas pelo servidor DHCP?",
                    "Houve alguma tentativa de renova√ß√£o de lease?"
                ],
                "downloadable_files": ["dhcp_process.pcap"]
            }
        ],
        "Seguran√ßa": [
            {
                "title": "Desafio 5: Detec√ß√£o de Port Scanning",
                "description": "Neste desafio, voc√™ analisar√° tr√°fego contendo diferentes tipos de port scans (SYN scan, TCP connect scan, FIN scan). O objetivo √© identificar os diferentes tipos de scan, o alvo, e as portas examinadas.",
                "difficulty": "Intermedi√°rio",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Procure por padr√µes de tr√°fego indicativos de port scanning",
                    "Identifique os diferentes tipos de scans utilizados",
                    "Determine as portas-alvo e resultados (abertas/fechadas)",
                    "Documente a timeline da atividade de scanning"
                ],
                "hints": [
                    "Procure por muitos pacotes SYN para portas diferentes",
                    "Observe pacotes com combina√ß√µes incomuns de flags TCP",
                    "Use estat√≠sticas para identificar padr√µes de comunica√ß√£o"
                ],
                "questions": [
                    "Quais tipos de port scan foram realizados?",
                    "Qual foi o intervalo de portas escaneado?",
                    "Quais portas foram identificadas como abertas?",
                    "Como voc√™ poderia detectar este tipo de atividade em tempo real?"
                ],
                "downloadable_files": ["port_scanning.pcap"]
            },
            {
                "title": "Desafio 6: An√°lise de Ataque de Brute Force",
                "description": "Neste desafio, voc√™ analisar√° uma tentativa de ataque de for√ßa bruta contra um servi√ßo SSH. O objetivo √© identificar o padr√£o de ataque, as credenciais testadas, e determinar se o ataque foi bem-sucedido.",
                "difficulty": "Avan√ßado",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Isole o tr√°fego relacionado ao servi√ßo SSH",
                    "Identifique o padr√£o de tentativas de login",
                    "Observe os tempos de conex√£o e desconex√£o",
                    "Determine se houve uma tentativa bem-sucedida"
                ],
                "hints": [
                    "Use 'tcp.port == 22' para isolar tr√°fego SSH",
                    "Observe o tamanho dos pacotes e dura√ß√£o das conex√µes",
                    "Analise os padr√µes de estabelecimento de conex√£o e fechamento"
                ],
                "questions": [
                    "Quantas tentativas de login foram realizadas?",
                    "Qual foi a taxa de tentativas (tentativas por minuto)?",
                    "Houve uma pausa ou mudan√ßa no padr√£o durante o ataque?",
                    "O ataque foi bem-sucedido? Como voc√™ pode determinar isso?"
                ],
                "downloadable_files": ["ssh_brute_force.pcap"]
            }
        ],
        "Forense": [
            {
                "title": "Desafio 7: Reconstru√ß√£o de Comunica√ß√£o por Email",
                "description": "Neste desafio forense, voc√™ analisar√° uma captura contendo comunica√ß√£o de email via SMTP e POP3/IMAP. O objetivo √© reconstruir o conte√∫do dos emails, identificar remetentes e destinat√°rios, e recuperar anexos.",
                "difficulty": "Avan√ßado",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Isole o tr√°fego de email (SMTP, POP3, IMAP)",
                    "Reconstrua as mensagens de email completas",
                    "Extraia metadados como remetentes, destinat√°rios, assuntos",
                    "Recupere quaisquer anexos presentes"
                ],
                "hints": [
                    "Use filtros como 'smtp or pop or imap'",
                    "Utilize 'Follow TCP Stream' para visualizar sess√µes completas",
                    "Preste aten√ß√£o a codifica√ß√µes como Base64 para anexos"
                ],
                "questions": [
                    "Quantos emails foram enviados/recebidos?",
                    "Quais eram os assuntos e conte√∫dos principais?",
                    "Havia anexos? Se sim, o que continham?",
                    "H√° algum conte√∫do suspeito ou indicativo de atividade maliciosa?"
                ],
                "downloadable_files": ["email_traffic.pcap"]
            },
            {
                "title": "Desafio 8: An√°lise de Malware C2",
                "description": "Neste desafio, voc√™ analisar√° tr√°fego de rede contendo comunica√ß√£o entre um host infectado e um servidor de comando e controle (C2). O objetivo √© identificar o malware, seus m√©todos de comunica√ß√£o e dados exfiltrados.",
                "difficulty": "Especialista",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Identifique padr√µes de comunica√ß√£o anormais",
                    "Isole o tr√°fego entre o host infectado e servidores externos",
                    "Analise os protocolos utilizados e poss√≠veis t√©cnicas de ofusca√ß√£o",
                    "Tente extrair comandos ou dados exfiltrados"
                ],
                "hints": [
                    "Procure por conex√µes persistentes a IPs ou dom√≠nios incomuns",
                    "Observe tr√°fego em intervalos regulares (beaconing)",
                    "Verifique conte√∫do codificado ou cifrado em protocolos comuns"
                ],
                "questions": [
                    "Qual host foi comprometido na rede?",
                    "Qual √© o endere√ßo do servidor C2?",
                    "Que tipo de dados foram exfiltrados?",
                    "Que t√©cnicas o malware usou para evitar detec√ß√£o?",
                    "Como voc√™ poderia bloquear este tipo de comunica√ß√£o no futuro?"
                ],
                "downloadable_files": ["malware_c2.pcap"]
            }
        ],
        "Troubleshooting": [
            {
                "title": "Desafio 9: Diagn√≥stico de Problemas de Performance",
                "description": "Neste desafio, voc√™ analisar√° uma rede com problemas de performance. O objetivo √© identificar os gargalos, lat√™ncia anormal, retransmiss√µes, e outros problemas que afetam o desempenho da rede.",
                "difficulty": "Intermedi√°rio",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Analise os tempos de resposta para diferentes protocolos",
                    "Identifique retransmiss√µes TCP e outros sinais de problemas",
                    "Verifique os tamanhos de janela TCP e ajustes de congestionamento",
                    "Localize poss√≠veis causas de lentid√£o"
                ],
                "hints": [
                    "Use filtros como 'tcp.analysis.retransmission' para encontrar problemas",
                    "Utilize os gr√°ficos em Statistics > TCP Stream Graphs",
                    "Verifique estat√≠sticas de Round-Trip Time"
                ],
                "questions": [
                    "Quais hosts/conex√µes apresentam problemas de performance?",
                    "Qual √© a taxa de retransmiss√£o m√©dia observada?",
                    "H√° problemas de fragmenta√ß√£o de pacotes?",
                    "Quais recomenda√ß√µes voc√™ faria para resolver os problemas identificados?"
                ],
                "downloadable_files": ["network_performance.pcap"]
            },
            {
                "title": "Desafio 10: Resolu√ß√£o de Problemas de Conectividade",
                "description": "Neste desafio, voc√™ analisar√° uma rede com problemas de conectividade intermitente. O objetivo √© identificar falhas de conex√£o, configura√ß√µes incorretas, e outros problemas que impedem a comunica√ß√£o efetiva.",
                "difficulty": "Intermedi√°rio",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Examine os padr√µes de falha de conex√£o",
                    "Analise configura√ß√µes de rede (ARP, DNS, gateway)",
                    "Identifique respostas de erro e timeouts",
                    "Determine a causa raiz dos problemas"
                ],
                "hints": [
                    "Verifique erros ICMP como 'host unreachable' ou 'port unreachable'",
                    "Observe problemas de resolu√ß√£o DNS",
                    "Procure por inconsist√™ncias nas tabelas ARP"
                ],
                "questions": [
                    "Quais hosts apresentam problemas de conectividade?",
                    "Qual a natureza principal do problema (DNS, roteamento, firewall, etc.)?",
                    "Os problemas s√£o consistentes ou intermitentes?",
                    "Que solu√ß√£o voc√™ recomendaria para resolver o problema?"
                ],
                "downloadable_files": ["connectivity_issues.pcap"]
            }
        ],
        "Avan√ßado": [
            {
                "title": "Desafio 11: An√°lise de Tr√°fego Cifrado",
                "description": "Neste desafio avan√ßado, voc√™ trabalhar√° com tr√°fego TLS/SSL, incluindo as chaves de sess√£o para permitir a decodifica√ß√£o. O objetivo √© analisar o conte√∫do de comunica√ß√µes cifradas e identificar potenciais problemas ou atividades maliciosas.",
                "difficulty": "Especialista",
                "instructions": [
                    "Abra o arquivo PCAP fornecido e o arquivo de log de chaves",
                    "Configure o Wireshark para usar as chaves de sess√£o (Edit > Preferences > Protocols > TLS)",
                    "Analise o handshake TLS e par√¢metros de criptografia",
                    "Examine o conte√∫do decodificado",
                    "Identifique qualquer atividade suspeita"
                ],
                "hints": [
                    "Verifique se o Wireshark est√° corretamente configurado para usar o arquivo de chaves",
                    "Utilize 'Follow TLS Stream' para ver o conte√∫do decodificado",
                    "Analise os certificados e par√¢metros de criptografia"
                ],
                "questions": [
                    "Quais su√≠tes de criptografia foram negociadas?",
                    "Os certificados envolvidos s√£o v√°lidos e confi√°veis?",
                    "Ap√≥s decodifica√ß√£o, h√° algum conte√∫do ou padr√£o suspeito?",
                    "Como voc√™ poderia detectar anomalias em tr√°fego cifrado sem ter as chaves?"
                ],
                "downloadable_files": ["encrypted_traffic.pcap", "sslkeys.log"]
            },
            {
                "title": "Desafio 12: An√°lise de Protocolo Personalizado",
                "description": "Neste desafio de n√≠vel especialista, voc√™ analisar√° tr√°fego contendo um protocolo propriet√°rio/personalizado desconhecido. O objetivo √© fazer engenharia reversa do protocolo, identificar seu formato, comandos, e funcionalidades.",
                "difficulty": "Especialista",
                "instructions": [
                    "Abra o arquivo PCAP fornecido",
                    "Identifique padr√µes no tr√°fego desconhecido",
                    "Tente determinar o formato do cabe√ßalho e campos do protocolo",
                    "Deduza comandos, respostas e funcionalidades do protocolo",
                    "Crie um 'dissector' b√°sico ou documenta√ß√£o sobre o protocolo"
                ],
                "hints": [
                    "Procure por padr√µes como bytes m√°gicos ou estruturas recorrentes",
                    "Verifique se o protocolo segue estruturas comuns (TLV, JSON, etc.)",
                    "Observe a rela√ß√£o entre solicita√ß√µes e respostas"
                ],
                "questions": [
                    "Qual √© a estrutura b√°sica do protocolo?",
                    "Quais comandos ou opera√ß√µes voc√™ conseguiu identificar?",
                    "O protocolo tem algum mecanismo de autentica√ß√£o ou seguran√ßa?",
                    "Como voc√™ implementaria um dissector para este protocolo no Wireshark?"
                ],
                "downloadable_files": ["custom_protocol.pcap"]
            }
        ]
    }
    
    # Mostrar desafios da categoria selecionada
    for challenge in challenges[selected_category]:
        with st.expander(f"{challenge['title']} ({challenge['difficulty']})", expanded=True):
            st.markdown(f"<p>{challenge['description']}</p>", unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("<h4>Instru√ß√µes</h4>", unsafe_allow_html=True)
                for i, instruction in enumerate(challenge["instructions"], 1):
                    st.markdown(f"{i}. {instruction}")
                
                st.markdown("<h4>Dicas</h4>", unsafe_allow_html=True)
                for hint in challenge["hints"]:
                    st.markdown(f"‚Ä¢ {hint}")
            
            with col2:
                st.markdown("<h4>Perguntas para Resolver</h4>", unsafe_allow_html=True)
                for i, question in enumerate(challenge["questions"], 1):
                    st.markdown(f"{i}. {question}")
                
                st.markdown("<h4>Arquivos Necess√°rios</h4>", unsafe_allow_html=True)
                for file in challenge["downloadable_files"]:
                    st.download_button(
                        f"Baixar {file}",
                        data=f"Este √© um placeholder para o arquivo {file}. Em um ambiente real, este bot√£o faria download do arquivo PCAP real.",
                        file_name=file,
                        mime="application/octet-stream"
                    )
    
    # Bot√£o para verificar solu√ß√µes
    if st.button("Verificar Solu√ß√µes (apenas para fins educacionais)"):
        st.info("As solu√ß√µes para os desafios estariam dispon√≠veis ap√≥s enviar suas respostas em um ambiente real. Isso permite que voc√™ possa aprender com erros e verificar sua compreens√£o.")
        
        # Exemplo de solu√ß√£o
        st.markdown("""
        <div class="highlight">
            <h3>Exemplo de Solu√ß√£o - Desafio 1: TCP Handshake Explorer</h3>
            
            <h4>Respostas:</h4>
            <ol>
                <li>A captura cont√©m 5 conex√µes TCP completas.</li>
                <li>Nem todas as tentativas foram bem-sucedidas. Duas tentativas foram rejeitadas com RST.</li>
                <li>Os n√∫meros de sequ√™ncia iniciais parecem seguir um padr√£o incremental, sugerindo que podem ser previs√≠veis.</li>
            </ol>
            
            <h4>M√©todo de An√°lise:</h4>
            <ol>
                <li>Utilizei o filtro <code>tcp.flags.syn==1 and tcp.flags.ack==0</code> para identificar todos os pacotes SYN iniciais</li>
                <li>Para cada pacote SYN, segui o stream correspondente para localizar o handshake completo</li>
                <li>Documentei cada conex√£o em uma tabela, incluindo IPs, portas e n√∫meros de sequ√™ncia</li>
                <li>Identifiquei as conex√µes rejeitadas procurando por pacotes RST logo ap√≥s os SYNs</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)

# Componente de Laborat√≥rio Pr√°tico
def practical_lab():
    st.markdown("<h1 class='main-header'>Laborat√≥rio Pr√°tico de Wireshark</h1>", unsafe_allow_html=True)
    
    # Modos do laborat√≥rio
    lab_modes = ["Simulador Wireshark", "Exerc√≠cios Pr√°ticos", "An√°lise de Capturas", "Ferramenta de Captura"]
    selected_mode = st.radio("Selecione o modo do laborat√≥rio:", lab_modes)
    
    if selected_mode == "Simulador Wireshark":
        wireshark_simulator()
    elif selected_mode == "Exerc√≠cios Pr√°ticos":
        practical_challenges()
    elif selected_mode == "An√°lise de Capturas":
        st.markdown("<h2 class='sub-header'>An√°lise de Capturas PCAP</h2>", unsafe_allow_html=True)
        
        # Upload de arquivo PCAP
        uploaded_file = st.file_uploader("Fa√ßa upload de um arquivo PCAP para an√°lise", type=["pcap", "pcapng"])
        
        if uploaded_file is not None:
            # Salva o arquivo temporariamente
            temp_file_path = os.path.join("/tmp", uploaded_file.name)
            with open(temp_file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            st.success(f"Arquivo carregado: {uploaded_file.name}")
            
            # Op√ß√µes de an√°lise
            analysis_options = ["An√°lise Geral", "Estat√≠sticas", "Extra√ß√£o de Objetos", "An√°lise de Seguran√ßa"]
            selected_analysis = st.selectbox("Selecione o tipo de an√°lise:", analysis_options)
            
            if st.button("Iniciar An√°lise"):
                with st.spinner("Analisando arquivo PCAP..."):
                    # Carrega o arquivo PCAP
                    df = pcap_to_dataframe(temp_file_path)
                    
                    if df is not None:
                        st.session_state.df = df
                        st.session_state.filtered_df = df
                        
                        # Extrai estat√≠sticas
                        statistics = extract_packet_statistics(df)
                        
                        # Detecta atividades suspeitas
                        suspicious_activities = detect_suspicious_patterns(df)
                        st.session_state.suspicious_activities = suspicious_activities
                        
                        # Exibe resultados conforme o tipo de an√°lise selecionado
                        if selected_analysis == "An√°lise Geral":
                            st.markdown("<h3>Vis√£o Geral da Captura</h3>", unsafe_allow_html=True)
                            
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("Total de Pacotes", statistics["total_packets"])
                            
                            with col2:
                                st.metric("Tamanho M√©dio", f"{statistics['avg_packet_size']:.2f} bytes")
                            
                            with col3:
                                st.metric("Taxa de Pacotes", f"{statistics['packet_rate']:.2f} pkt/s")
                            
                            # Tabela de pacotes
                            st.markdown("<h3>Lista de Pacotes</h3>", unsafe_allow_html=True)
                            st.dataframe(df.drop(columns=['Raw']), use_container_width=True)
                        
                        elif selected_analysis == "Estat√≠sticas":
                            st.markdown("<h3>Estat√≠sticas da Captura</h3>", unsafe_allow_html=True)
                            
                            # Gera gr√°ficos
                            charts = generate_analysis_charts(df, statistics)
                            
                            # Mostra os gr√°ficos
                            if "protocol_distribution" in charts:
                                st.plotly_chart(charts["protocol_distribution"], use_container_width=True)
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                if "top_sources" in charts:
                                    st.plotly_chart(charts["top_sources"], use_container_width=True)
                            
                            with col2:
                                if "top_destinations" in charts:
                                    st.plotly_chart(charts["top_destinations"], use_container_width=True)
                            
                            if "packets_timeline" in charts:
                                st.plotly_chart(charts["packets_timeline"], use_container_width=True)
                            
                            if "packet_size_distribution" in charts:
                                st.plotly_chart(charts["packet_size_distribution"], use_container_width=True)
                        
                        elif selected_analysis == "Extra√ß√£o de Objetos":
                            st.markdown("<h3>Extra√ß√£o de Objetos</h3>", unsafe_allow_html=True)
                            
                            # Simula extra√ß√£o de objetos
                            st.info("Esta funcionalidade simularia a extra√ß√£o de arquivos e objetos da captura PCAP, como imagens, documentos, etc.")
                            
                            # Exemplo de objetos encontrados
                            example_objects = [
                                {"tipo": "Imagem", "nome": "logo.png", "tamanho": "24KB", "protocolo": "HTTP"},
                                {"tipo": "Documento", "nome": "relatorio.pdf", "tamanho": "156KB", "protocolo": "HTTP"},
                                {"tipo": "Script", "nome": "analytics.js", "tamanho": "45KB", "protocolo": "HTTP"}
                            ]
                            
                            objects_df = pd.DataFrame(example_objects)
                            st.dataframe(objects_df, use_container_width=True)
                            
                            for obj in example_objects:
                                st.download_button(
                                    f"Extrair {obj['nome']}",
                                    data=f"Conte√∫do simulado do arquivo {obj['nome']}",
                                    file_name=obj["nome"],
                                    mime="application/octet-stream"
                                )
                        
                        elif selected_analysis == "An√°lise de Seguran√ßa":
                            st.markdown("<h3>An√°lise de Seguran√ßa</h3>", unsafe_allow_html=True)
                            
                            if suspicious_activities:
                                st.warning(f"Encontradas {len(suspicious_activities)} atividades suspeitas!")
                                
                                for activity in suspicious_activities:
                                    severity_color = {
                                        "high": "#ff4444",
                                        "medium": "#ffbb33",
                                        "low": "#33b5e5"
                                    }.get(activity.get("severity", "low"), "#33b5e5")
                                    
                                    st.markdown(
                                        f"<div style='background-color: {severity_color}22; border-left: 5px solid {severity_color}; padding: 15px; margin-bottom: 15px; border-radius: 5px;'>"
                                        f"<h3 style='margin-top: 0; color: {severity_color};'>{activity['type']}</h3>"
                                        f"<p><strong>Detalhes:</strong> {activity['details']}</p>"
                                        f"<p><strong>Severidade:</strong> <span style='color: {severity_color};'>{activity.get('severity', 'baixa').upper()}</span></p>"
                                        f"</div>",
                                        unsafe_allow_html=True
                                    )
                            else:
                                st.success("Nenhuma atividade suspeita detectada na captura atual.")
                    else:
                        st.error("N√£o foi poss√≠vel analisar o arquivo PCAP. Verifique se √© um arquivo v√°lido.")
            
            # Limpa o arquivo tempor√°rio ap√≥s o uso
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)
    
    elif selected_mode == "Ferramenta de Captura":
        st.markdown("<h2 class='sub-header'>Ferramenta de Captura de Pacotes</h2>", unsafe_allow_html=True)
        
        st.markdown("""
        <div class="highlight">
            <p>Esta se√ß√£o simula uma ferramenta de captura de pacotes ao vivo. Em um ambiente real, esta ferramenta permitiria capturar pacotes diretamente da interface de rede.</p>
            <p>Por motivos de seguran√ßa e limita√ß√µes t√©cnicas, esta simula√ß√£o n√£o realiza capturas reais, mas demonstra como seria a interface e o fluxo de trabalho.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Interface de captura simulada
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("<h3>Configura√ß√µes de Captura</h3>", unsafe_allow_html=True)
            
            # Sele√ß√£o de interface (simulada)
            interface = st.selectbox(
                "Interface de Rede:",
                ["eth0 (Ethernet)", "wlan0 (Wi-Fi)", "lo (Loopback)"]
            )
            
            # Filtros de captura
            capture_filter = st.text_input("Filtro de Captura (sintaxe BPF):", 
                                          placeholder="Ex: port 80 or port 443")
            
            # Op√ß√µes adicionais
            st.checkbox("Resolu√ß√£o de nomes (DNS, portas, etc.)")
            st.checkbox("Capturar em modo prom√≠scuo")
            
            # Limites
            col1_1, col1_2 = st.columns(2)
            
            with col1_1:
                st.number_input("Limite de pacotes:", min_value=0, value=0, 
                               help="0 = sem limite")
            
            with col1_2:
                st.number_input("Limite de tempo (s):", min_value=0, value=0,
                               help="0 = sem limite")
            
            # Bot√µes de controle
            if st.button("Iniciar Captura Simulada"):
                with st.spinner("Capturando pacotes..."):
                    # Simulamos a captura gerando dados aleat√≥rios
                    time.sleep(2)  # Simula um atraso de captura
                    
                    # Gera uma captura simulada
                    simulated_capture = simulate_packet_capture("mixed", 10)
                    st.session_state.df = simulated_capture
                    st.session_state.filtered_df = simulated_capture
                    
                    st.success(f"Captura simulada conclu√≠da! {len(simulated_capture)} pacotes capturados.")
        
        with col2:
            st.markdown("<h3>Status da Captura</h3>", unsafe_allow_html=True)
            
            # Estat√≠sticas em tempo real (simuladas)
            if hasattr(st.session_state, 'df') and st.session_state.df is not None:
                statistics = extract_packet_statistics(st.session_state.df)
                
                st.metric("Pacotes Capturados", statistics["total_packets"])
                st.metric("Taxa M√©dia", f"{statistics['packet_rate']:.2f} pkt/s")
                
                # Protocolos capturados
                st.markdown("<h4>Protocolos Capturados</h4>", unsafe_allow_html=True)
                
                protocols_df = pd.DataFrame({
                    'Protocolo': list(statistics["protocols"].keys()),
                    'Quantidade': list(statistics["protocols"].values())
                })
                
                st.dataframe(protocols_df, use_container_width=True)
                
                # Op√ß√£o para salvar
                if st.button("Salvar Captura"):
                    st.download_button(
                        "Baixar como PCAP",
                        data="Conte√∫do simulado do arquivo PCAP",
                        file_name="captura_simulada.pcap",
                        mime="application/octet-stream"
                    )
            else:
                st.info("Nenhuma captura em andamento.")
                
                # Estat√≠sticas simuladas
                st.metric("Pacotes Capturados", 0)
                st.metric("Taxa M√©dia", "0.00 pkt/s")
        
        # Mostra os pacotes capturados (se houver)
        if hasattr(st.session_state, 'df') and st.session_state.df is not None:
            st.markdown("<h3>Pacotes Capturados</h3>", unsafe_allow_html=True)
            
            # Op√ß√µes de filtro
            display_filter = st.text_input("Filtro de Exibi√ß√£o:", 
                                          placeholder="Ex: http or dns")
            
            # Aplica filtro se fornecido
            if display_filter:
                # Simula a aplica√ß√£o de filtros (simplificado)
                filtered_df = st.session_state.df[st.session_state.df['Protocol'].str.contains(display_filter, case=False)]
                
                if filtered_df.empty:
                    st.warning(f"Nenhum pacote corresponde ao filtro: {display_filter}")
                else:
                    st.dataframe(filtered_df.drop(columns=['Raw']), use_container_width=True)
            else:
                st.dataframe(st.session_state.df.drop(columns=['Raw']), use_container_width=True)

# Componente de Recursos Educacionais
def educational_resources():
    st.markdown("<h1 class='main-header'>Recursos Educacionais</h1>", unsafe_allow_html=True)
    
    # Abas para diferentes tipos de recursos
    tabs = st.tabs(["Tutoriais em V√≠deo", "Artigos", "Ferramentas Complementares", "Gloss√°rio", "Perguntas Frequentes"])
    
    # Aba de Tutoriais em V√≠deo
    with tabs[0]:
        st.markdown("<h2 class='sub-header'>Tutoriais em V√≠deo</h2>", unsafe_allow_html=True)
        
        video_categories = [
            {
                "title": "Fundamentos do Wireshark",
                "videos": [
                    {
                        "title": "Introdu√ß√£o ao Wireshark",
                        "description": "Conceitos b√°sicos, instala√ß√£o e primeiro uso do Wireshark",
                        "url": "https://www.youtube.com/watch?v=lb1Dw0elw0Q",
                        "duration": "15:22",
                        "level": "Iniciante"
                    },
                    {
                        "title": "Interface do Wireshark em Detalhes",
                        "description": "Explorando todos os componentes da interface do Wireshark",
                        "url": "https://www.youtube.com/watch?v=TkCSr30UojM",
                        "duration": "12:45",
                        "level": "Iniciante"
                    },
                    {
                        "title": "Capturando seu Primeiro Tr√°fego",
                        "description": "Como iniciar capturas e configurar op√ß√µes b√°sicas",
                        "url": "https://www.youtube.com/watch?v=4_gustyM9Gs",
                        "duration": "18:10",
                        "level": "Iniciante"
                    }
                ]
            },
            {
                "title": "An√°lise de Protocolos",
                "videos": [
                    {
                        "title": "An√°lise de Tr√°fego HTTP",
                        "description": "Como analisar requisi√ß√µes e respostas HTTP no Wireshark",
                        "url": "https://www.youtube.com/watch?v=0S-ZUUyZhSg",
                        "duration": "22:35",
                        "level": "Intermedi√°rio"
                    },
                    {
                        "title": "Entendendo o TCP Handshake",
                        "description": "An√°lise detalhada do processo de three-way handshake do TCP",
                        "url": "https://www.youtube.com/watch?v=yDDcYRSlrp8",
                        "duration": "16:40",
                        "level": "Intermedi√°rio"
                    },
                    {
                        "title": "DNS em Detalhes",
                        "description": "Como funcionam as consultas e respostas DNS",
                        "url": "https://www.youtube.com/watch?v=Gdj_D6_P4HQ",
                        "duration": "19:55",
                        "level": "Intermedi√°rio"
                    }
                ]
            },
            {
                "title": "An√°lise de Seguran√ßa",
                "videos": [
                    {
                        "title": "Detectando Port Scanning",
                        "description": "Como identificar diferentes tipos de port scanning com Wireshark",
                        "url": "https://www.youtube.com/watch?v=jU_V4i4TX2g",
                        "duration": "28:15",
                        "level": "Avan√ßado"
                    },
                    {
                        "title": "Analisando Ataques DDoS",
                        "description": "Identifica√ß√£o e an√°lise de diferentes tipos de ataques DDoS",
                        "url": "https://www.youtube.com/watch?v=5K2mnjNnV7A",
                        "duration": "35:22",
                        "level": "Avan√ßado"
                    },
                    {
                        "title": "Detec√ß√£o de Malware em Tr√°fego",
                        "description": "Como identificar padr√µes de comunica√ß√£o de malware",
                        "url": "https://www.youtube.com/watch?v=Kp5XQbz3IIg",
                        "duration": "42:10",
                        "level": "Especialista"
                    }
                ]
            },
            {
                "title": "T√©cnicas Avan√ßadas",
                "videos": [
                    {
                        "title": "Filtros Avan√ßados no Wireshark",
                        "description": "T√©cnicas e sintaxes avan√ßadas para filtros de exibi√ß√£o",
                        "url": "https://www.youtube.com/watch?v=UXAHvwouk6Q",
                        "duration": "25:30",
                        "level": "Avan√ßado"
                    },
                    {
                        "title": "Decodificando Tr√°fego TLS/SSL",
                        "description": "Como configurar o Wireshark para decodificar tr√°fego cifrado",
                        "url": "https://www.youtube.com/watch?v=gRcJBCdNbVo",
                        "duration": "31:45",
                        "level": "Especialista"
                    },
                    {
                        "title": "Criando Dissectores Personalizados",
                        "description": "Como criar dissectores para protocolos personalizados usando Lua",
                        "url": "https://www.youtube.com/watch?v=UeAKTjx_eKA",
                        "duration": "48:20",
                        "level": "Especialista"
                    }
                ]
            }
        ]
        
        # Exibi√ß√£o dos v√≠deos por categoria
        for category in video_categories:
            st.markdown(f"<h3>{category['title']}</h3>", unsafe_allow_html=True)
            
            for video in category['videos']:
                col1, col2, col3 = st.columns([1, 3, 1])
                
                with col1:
                    st.image("https://via.placeholder.com/120x80?text=Video", width=120)
                
                with col2:
                    st.markdown(f"<h4>{video['title']}</h4>", unsafe_allow_html=True)
                    st.markdown(f"{video['description']}")
                    st.markdown(f"<span style='color: #666;'>Dura√ß√£o: {video['duration']} | N√≠vel: {video['level']}</span>", unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"<div style='margin-top: 20px;'></div>", unsafe_allow_html=True)
                    st.link_button("Assistir", video['url'], use_container_width=True)
            
            st.markdown("<hr>", unsafe_allow_html=True)
    
    # Aba de Artigos
    with tabs[1]:
        st.markdown("<h2 class='sub-header'>Artigos e Guias</h2>", unsafe_allow_html=True)
        
        article_categories = [
            {
                "title": "Fundamentos",
                "articles": [
                    {
                        "title": "Guia Completo do Iniciante em Wireshark",
                        "description": "Um guia completo para quem est√° come√ßando com an√°lise de pacotes usando Wireshark.",
                        "reading_time": "15 min",
                        "level": "Iniciante"
                    },
                    {
                        "title": "Entendendo Protocolos de Rede com Wireshark",
                        "description": "Aprenda os conceitos b√°sicos de protocolos de rede analisando capturas reais.",
                        "reading_time": "20 min",
                        "level": "Iniciante"
                    },
                    {
                        "title": "Filtros Essenciais para o Dia a Dia",
                        "description": "Uma cole√ß√£o dos filtros mais √∫teis para an√°lise de tr√°fego cotidiana.",
                        "reading_time": "10 min",
                        "level": "Iniciante"
                    }
                ]
            },
            {
                "title": "An√°lise de Problemas",
                "articles": [
                    {
                        "title": "Troubleshooting de Redes com Wireshark",
                        "description": "Como utilizar o Wireshark para diagnosticar problemas comuns de rede.",
                        "reading_time": "25 min",
                        "level": "Intermedi√°rio"
                    },
                    {
                        "title": "An√°lise de Performance de Aplica√ß√µes Web",
                        "description": "T√©cnicas para identificar gargalos de performance em aplica√ß√µes web.",
                        "reading_time": "30 min",
                        "level": "Intermedi√°rio"
                    },
                    {
                        "title": "Resolu√ß√£o de Problemas de VoIP",
                        "description": "Como analisar qualidade e problemas em tr√°fego de voz sobre IP.",
                        "reading_time": "22 min",
                        "level": "Avan√ßado"
                    }
                ]
            },
            {
                "title": "Seguran√ßa",
                "articles": [
                    {
                        "title": "Detec√ß√£o de Intrus√£o com Wireshark",
                        "description": "Como identificar sinais de intrus√£o e atividade maliciosa em sua rede.",
                        "reading_time": "35 min",
                        "level": "Avan√ßado"
                    },
                    {
                        "title": "An√°lise Forense de Tr√°fego",
                        "description": "T√©cnicas forenses para investiga√ß√£o de incidentes de seguran√ßa.",
                        "reading_time": "40 min",
                        "level": "Avan√ßado"
                    },
                    {
                        "title": "Reconhecimento de Padr√µes de Malware",
                        "description": "Como identificar comportamentos t√≠picos de malware em tr√°fego de rede.",
                        "reading_time": "45 min",
                        "level": "Especialista"
                    }
                ]
            },
            {
                "title": "T√©cnicas Avan√ßadas",
                "articles": [
                    {
                        "title": "Automa√ß√£o de An√°lise com Tshark e Python",
                        "description": "Como automatizar tarefas de an√°lise usando Tshark e bibliotecas Python.",
                        "reading_time": "50 min",
                        "level": "Especialista"
                    },
                    {
                        "title": "Desenvolvimento de Dissectores Personalizados",
                        "description": "Guia completo para criar dissectores para protocolos propriet√°rios.",
                        "reading_time": "60 min",
                        "level": "Especialista"
                    },
                    {
                        "title": "Integra√ß√£o do Wireshark com Sistemas de Monitoramento",
                        "description": "Como incorporar an√°lise de pacotes em sistemas de monitoramento cont√≠nuo.",
                        "reading_time": "45 min",
                        "level": "Especialista"
                    }
                ]
            }
        ]
        
        # Exibi√ß√£o dos artigos por categoria
        for category in article_categories:
            st.markdown(f"<h3>{category['title']}</h3>", unsafe_allow_html=True)
            
            for article in category['articles']:
                st.markdown(f"""
                <div style='background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 10px;'>
                    <h4 style='margin-top: 0;'>{article['title']}</h4>
                    <p>{article['description']}</p>
                    <p style='color: #666; margin-bottom: 0;'>Tempo de leitura: {article['reading_time']} | N√≠vel: {article['level']}</p>
                    <button style='background-color: #0066cc; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;'>Ler Artigo</button>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("<hr>", unsafe_allow_html=True)
    
    # Aba de Ferramentas Complementares
    with tabs[2]:
        st.markdown("<h2 class='sub-header'>Ferramentas Complementares</h2>", unsafe_allow_html=True)
        
        st.markdown("""
        <p>Al√©m do Wireshark, existem v√°rias ferramentas que podem complementar sua an√°lise de tr√°fego e seguran√ßa de rede. Aqui est√£o algumas das mais √∫teis:</p>
        """, unsafe_allow_html=True)
        
        tools = [
            {
                "name": "Tcpdump",
                "description": "Ferramenta de linha de comando para captura e an√°lise de pacotes. Ideal para servidores sem interface gr√°fica.",
                "category": "Captura de Pacotes",
                "link": "https://www.tcpdump.org/",
                "platform": "Linux, macOS, Unix"
            },
            {
                "name": "TShark",
                "description": "Vers√£o de linha de comando do Wireshark, permitindo captura e an√°lise via scripts e automa√ß√£o.",
                "category": "Captura de Pacotes",
                "link": "https://www.wireshark.org/docs/man-pages/tshark.html",
                "platform": "Windows, Linux, macOS"
            },
            {
                "name": "NetworkMiner",
                "description": "Analisador forense de rede que extrai arquivos, imagens, e-mails e outras informa√ß√µes de capturas PCAP.",
                "category": "An√°lise Forense",
                "link": "https://www.netresec.com/?page=NetworkMiner",
                "platform": "Windows (.NET)"
            },
            {
                "name": "Zeek (anteriormente Bro)",
                "description": "Sistema de detec√ß√£o de intrus√£o baseado em an√°lise de tr√°fego, focado em seguran√ßa e monitoramento.",
                "category": "Seguran√ßa",
                "link": "https://zeek.org/",
                "platform": "Linux, macOS, FreeBSD"
            },
            {
                "name": "Suricata",
                "description": "Engine de detec√ß√£o de amea√ßas de alta performance, capaz de detec√ß√£o de intrus√£o em tempo real.",
                "category": "Seguran√ßa",
                "link": "https://suricata.io/",
                "platform": "Multiplataforma"
            },
            {
                "name": "PcapXray",
                "description": "Ferramenta para visualiza√ß√£o de tr√°fego de rede a partir de arquivos PCAP, criando gr√°ficos de intera√ß√µes.",
                "category": "Visualiza√ß√£o",
                "link": "https://github.com/Srinivas11789/PcapXray",
                "platform": "Multiplataforma (Python)"
            },
            {
                "name": "Scapy",
                "description": "Biblioteca Python para manipula√ß√£o de pacotes, permitindo cria√ß√£o, an√°lise e inje√ß√£o de pacotes.",
                "category": "Desenvolvimento",
                "link": "https://scapy.net/",
                "platform": "Multiplataforma (Python)"
            },
            {
                "name": "Pyshark",
                "description": "Wrapper Python para Tshark, permitindo an√°lise program√°tica de capturas usando Python.",
                "category": "Desenvolvimento",
                "link": "https://github.com/KimiNewt/pyshark",
                "platform": "Multiplataforma (Python)"
            },
            {
                "name": "Moloch (Arkime)",
                "description": "Plataforma de captura e indexa√ß√£o de pacotes em larga escala para an√°lise hist√≥rica.",
                "category": "Enterprise",
                "link": "https://arkime.com/",
                "platform": "Linux"
            },
            {
                "name": "ngrep",
                "description": "Ferramenta similar ao grep para padr√µes de rede, permitindo buscas em conte√∫do de pacotes.",
                "category": "An√°lise",
                "link": "https://github.com/jpr5/ngrep",
                "platform": "Linux, macOS, Windows (Cygwin)"
            }
        ]
        
        # Agrupamento por categoria
        categories = {}
        for tool in tools:
            if tool["category"] not in categories:
                categories[tool["category"]] = []
            categories[tool["category"]].append(tool)
        
        # Exibi√ß√£o das ferramentas por categoria
        for category, tool_list in categories.items():
            st.markdown(f"<h3>{category}</h3>", unsafe_allow_html=True)
            
            for tool in tool_list:
                st.markdown(f"""
                <div style='background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 10px;'>
                    <h4 style='margin-top: 0;'>{tool['name']}</h4>
                    <p>{tool['description']}</p>
                    <p style='color: #666; margin-bottom: 5px;'>Plataforma: {tool['platform']}</p>
                    <a href="{tool['link']}" target="_blank" style='color: #0066cc;'>Site Oficial</a>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("<hr>", unsafe_allow_html=True)
    
    # Aba de Gloss√°rio
    with tabs[3]:
        st.markdown("<h2 class='sub-header'>Gloss√°rio de Termos</h2>", unsafe_allow_html=True)
        
        st.markdown("""
        <p>Este gloss√°rio cont√©m termos t√©cnicos relacionados √† an√°lise de rede, seguran√ßa e Wireshark.</p>
        """, unsafe_allow_html=True)
        
        glossary_items = [
            {
                "term": "ARP (Address Resolution Protocol)",
                "definition": "Protocolo usado para descobrir o endere√ßo MAC (camada 2) associado a um endere√ßo IP (camada 3) dentro de uma rede local."
            },
            {
                "term": "BPF (Berkeley Packet Filter)",
                "definition": "Linguagem de filtros usada para selecionar pacotes para captura. √â utilizada nos filtros de captura do Wireshark e tcpdump."
            },
            {
                "term": "DHCP (Dynamic Host Configuration Protocol)",
                "definition": "Protocolo que atribui automaticamente endere√ßos IP e outras configura√ß√µes de rede a dispositivos em uma rede."
            },
            {
                "term": "DNS (Domain Name System)",
                "definition": "Sistema que traduz nomes de dom√≠nio leg√≠veis (como example.com) em endere√ßos IP num√©ricos usados pelos computadores."
            },
            {
                "term": "Dissector",
                "definition": "No Wireshark, √© o componente que analisa e interpreta um protocolo espec√≠fico, extraindo informa√ß√µes dos pacotes."
            },
            {
                "term": "Encapsulamento",
                "definition": "Processo de incluir os dados de um protocolo dentro de outro, seguindo o modelo de camadas OSI ou TCP/IP."
            },
            {
                "term": "Filtro de Captura",
                "definition": "Express√£o usada para limitar quais pacotes s√£o capturados pelo Wireshark, aplicada antes da captura."
            },
            {
                "term": "Filtro de Exibi√ß√£o",
                "definition": "Express√£o usada para filtrar quais pacotes j√° capturados s√£o exibidos na interface do Wireshark."
            },
            {
                "term": "Handshake",
                "definition": "Processo de estabelecimento de conex√£o entre dois dispositivos, tipicamente envolvendo troca de par√¢metros e sincroniza√ß√£o."
            },
            {
                "term": "HTTP (Hypertext Transfer Protocol)",
                "definition": "Protocolo de aplica√ß√£o usado para transfer√™ncia de hipertexto na web, base para comunica√ß√£o de dados na WWW."
            },
            {
                "term": "ICMP (Internet Control Message Protocol)",
                "definition": "Protocolo usado para enviar mensagens de erro e operacionais, como o comando ping."
            },
            {
                "term": "IP (Internet Protocol)",
                "definition": "Protocolo principal da camada de rede, respons√°vel pelo endere√ßamento e roteamento de pacotes entre redes."
            },
            {
                "term": "Jitter",
                "definition": "Varia√ß√£o no tempo de chegada dos pacotes, importante em aplica√ß√µes de tempo real como VoIP e streaming."
            },
            {
                "term": "MAC Address (Media Access Control)",
                "definition": "Identificador √∫nico de hardware atribu√≠do a interfaces de rede, usado na camada de enlace de dados."
            },
            {
                "term": "MTU (Maximum Transmission Unit)",
                "definition": "Tamanho m√°ximo (em bytes) de um pacote que pode ser transmitido em uma rede sem fragmenta√ß√£o."
            },
            {
                "term": "PCAP (Packet Capture)",
                "definition": "Formato de arquivo usado para armazenar dados de pacotes capturados, utilizado pelo Wireshark e outras ferramentas."
            },
            {
                "term": "Promiscuous Mode",
                "definition": "Modo de opera√ß√£o que permite a uma interface de rede capturar todos os pacotes, mesmo aqueles n√£o destinados a ela."
            },
            {
                "term": "Port Scanning",
                "definition": "T√©cnica usada para identificar portas abertas em um sistema, frequentemente como precursor de ataques."
            },
            {
                "term": "Retransmiss√£o",
                "definition": "Reenvio de pacotes TCP que n√£o foram reconhecidos pelo destinat√°rio, indicando poss√≠vel perda ou corrup√ß√£o."
            },
            {
                "term": "RTT (Round-Trip Time)",
                "definition": "Tempo necess√°rio para um pacote ir do remetente para o destinat√°rio e voltar, medida importante de lat√™ncia."
            },
            {
                "term": "SYN Flood",
                "definition": "Tipo de ataque DoS que envia grande n√∫mero de pacotes TCP SYN sem completar o handshake, esgotando recursos do servidor."
            },
            {
                "term": "TCP (Transmission Control Protocol)",
                "definition": "Protocolo de transporte orientado a conex√£o que garante entrega confi√°vel e ordenada de dados."
            },
            {
                "term": "Three-Way Handshake",
                "definition": "Processo de tr√™s etapas (SYN, SYN-ACK, ACK) usado pelo TCP para estabelecer uma conex√£o."
            },
            {
                "term": "TLS/SSL (Transport Layer Security)",
                "definition": "Protocolos criptogr√°ficos que proporcionam comunica√ß√µes seguras em uma rede de computadores."
            },
            {
                "term": "TTL (Time To Live)",
                "definition": "Campo em pacotes IP que limita seu tempo de vida na rede, decrementado a cada roteador por onde passa."
            },
            {
                "term": "UDP (User Datagram Protocol)",
                "definition": "Protocolo de transporte sem conex√£o que n√£o garante entrega, sequ√™ncia ou prote√ß√£o contra duplica√ß√£o."
            },
            {
                "term": "VLAN (Virtual Local Area Network)",
                "definition": "Tecnologia que segmenta logicamente uma rede f√≠sica em m√∫ltiplas redes virtuais isoladas."
            }
        ]
        
        # Ordena√ß√£o alfab√©tica
        glossary_items.sort(key=lambda x: x["term"])
        
        # Cria√ß√£o de um √≠ndice alfab√©tico
        letters = sorted(set(item["term"][0].upper() for item in glossary_items))
        letter_index = " | ".join([f"<a href='#{letter}' style='text-decoration: none;'>{letter}</a>" for letter in letters])
        
        st.markdown(f"<div style='text-align: center; font-size: 1.2em; margin-bottom: 20px;'>{letter_index}</div>", unsafe_allow_html=True)
        
        # Exibi√ß√£o dos termos agrupados por letra inicial
        current_letter = None
        for item in glossary_items:
            first_letter = item["term"][0].upper()
            
            if first_letter != current_letter:
                current_letter = first_letter
                st.markdown(f"<h3 id='{current_letter}'>{current_letter}</h3>", unsafe_allow_html=True)
            
            st.markdown(f"""
            <div style='margin-bottom: 15px;'>
                <strong>{item['term']}</strong>: {item['definition']}
            </div>
            """, unsafe_allow_html=True)
    
    # Aba de Perguntas Frequentes
    with tabs[4]:
        st.markdown("<h2 class='sub-header'>Perguntas Frequentes</h2>", unsafe_allow_html=True)
        
        faqs = [
            {
                "question": "O que √© o Wireshark e para que serve?",
                "answer": "O Wireshark √© um analisador de protocolo de rede gratuito e de c√≥digo aberto, utilizado para capturar, examinar e analisar pacotes de dados em uma rede. √â uma ferramenta essencial para profissionais de rede, administradores de sistemas, engenheiros de seguran√ßa e desenvolvedores que precisam diagnosticar problemas de rede, analisar comportamentos de aplica√ß√µes, identificar problemas de seguran√ßa ou simplesmente aprender sobre protocolos de rede."
            },
            {
                "question": "Quais s√£o os requisitos para instalar o Wireshark?",
                "answer": "O Wireshark est√° dispon√≠vel para Windows, macOS e Linux. Os requisitos b√°sicos incluem:\n\n- Windows: Windows 10 ou posterior (32 ou 64 bits)\n- macOS: macOS 10.13 ou posterior\n- Linux: Distribui√ß√£o moderna com bibliotecas Qt\n\nPara capturar pacotes, voc√™ precisar√° de privil√©gios administrativos e, no caso do Windows, do driver Npcap ou WinPcap instalado. No Linux e macOS, √†s vezes √© necess√°rio configurar permiss√µes espec√≠ficas para usu√°rios sem privil√©gios de root."
            },
            {
                "question": "Por que n√£o consigo ver tr√°fego HTTP no Wireshark ao visitar sites HTTPS?",
                "answer": "A maioria dos sites hoje utiliza HTTPS (HTTP sobre TLS/SSL), que criptografa o tr√°fego entre o navegador e o servidor web. No Wireshark, voc√™ ver√° este tr√°fego como TLS ou SSL, n√£o como HTTP. O conte√∫do dos pacotes aparecer√° cifrado.\n\nPara decifrar este tr√°fego, voc√™ precisaria de uma das seguintes op√ß√µes:\n\n1. Configurar seu navegador para exportar as chaves de sess√£o TLS e configurar o Wireshark para us√°-las\n2. Se voc√™ controla o servidor, exportar as chaves privadas RSA (apenas para vers√µes antigas de TLS)\n3. Configurar um proxy HTTPS intermedi√°rio para realizar MITM (man-in-the-middle) legal em sua pr√≥pria rede"
            },
            {
                "question": "Quais s√£o os filtros mais √∫teis no Wireshark?",
                "answer": "Alguns dos filtros mais comumente utilizados incluem:\n\n- `ip.addr == 192.168.1.1` - Tr√°fego de/para um IP espec√≠fico\n- `http` ou `dns` ou `tcp` - Filtrar por protocolo\n- `tcp.port == 80` - Tr√°fego TCP em uma porta espec√≠fica\n- `http.request.method == \"GET\"` - Requisi√ß√µes HTTP GET\n- `tcp.flags.syn == 1` - Pacotes SYN do TCP\n- `icmp` - Todos os pacotes ICMP (ping)\n- `!(arp or dns)` - Exclui tr√°fego ARP e DNS\n\nVoc√™ pode combinar filtros com operadores l√≥gicos como `and`, `or` e `not`."
            },
            {
                "question": "√â legal usar o Wireshark em qualquer rede?",
                "answer": "N√£o. Embora o Wireshark seja uma ferramenta leg√≠tima para an√°lise de rede, seu uso deve respeitar quest√µes legais e √©ticas:\n\n1. √â geralmente permitido capturar tr√°fego em sua pr√≥pria rede ou em redes em que voc√™ tenha autoriza√ß√£o expl√≠cita\n2. √â ilegal em muitos pa√≠ses capturar tr√°fego em redes p√∫blicas ou privadas sem autoriza√ß√£o\n3. Muitas empresas t√™m pol√≠ticas que pro√≠bem o uso de ferramentas de captura de pacotes sem aprova√ß√£o pr√©via\n4. Capturar comunica√ß√µes de terceiros pode violar leis de privacidade e intercepta√ß√£o\n\nConsulte sempre as leis locais e obtenha as autoriza√ß√µes necess√°rias antes de usar o Wireshark em qualquer ambiente."
            },
            {
                "question": "Como posso identificar problemas de performance de rede com o Wireshark?",
                "answer": "Para diagnosticar problemas de performance, procure por:\n\n1. Retransmiss√µes TCP - Use o filtro `tcp.analysis.retransmission` para identificar pacotes perdidos\n2. Lat√™ncia alta - Analise tempos de resposta usando os gr√°ficos de Round-Trip Time (Statistics > TCP Stream Graph > Round Trip Time)\n3. Fragmenta√ß√£o - Procure por pacotes IP fragmentados com `ip.flags.mf == 1 or ip.frag_offset > 0`\n4. Janelas de congestionamento - Observe redu√ß√µes nos tamanhos de janela TCP\n5. Timeouts - Procure por longos intervalos entre solicita√ß√µes e respostas\n\nTamb√©m √© √∫til analisar estat√≠sticas com Statistics > I/O Graph para visualizar varia√ß√µes no volume de tr√°fego ao longo do tempo."
            },
            {
                "question": "O Wireshark consome muitos recursos do sistema?",
                "answer": "O Wireshark pode consumir recursos significativos do sistema, especialmente em redes de alto volume ou ao abrir capturas muito grandes. Para otimizar o desempenho:\n\n1. Use filtros de captura para limitar o que √© capturado inicialmente\n2. Evite capturar em interfaces de alto tr√°fego por longos per√≠odos\n3. Divida capturas grandes em arquivos menores (File > Export Specified Packets)\n4. Desative a resolu√ß√£o de nomes (nome de hosts, portas, etc.) para captura mais r√°pida\n5. Em sistemas com recursos limitados, considere usar tshark (vers√£o de linha de comando) em vez da interface gr√°fica\n\nPara capturas muito grandes, ferramentas complementares como mergecap (para dividir/mesclar capturas) podem ser √∫teis."
            },
            {
                "question": "Como posso aprender mais sobre an√°lise de protocolos espec√≠ficos?",
                "answer": "Para aprofundar seu conhecimento em protocolos espec√≠ficos:\n\n1. Consulte a documenta√ß√£o oficial do Wireshark para o protocolo em quest√£o\n2. Estude as RFCs (Request for Comments) que definem o protocolo\n3. Crie capturas controladas focadas no protocolo espec√≠fico\n4. Examine os campos do protocolo em detalhes no painel do Wireshark\n5. Procure por webinars e cursos especializados no protocolo\n6. Participe de comunidades como o f√≥rum do Wireshark ou StackExchange\n\nUma t√©cnica eficaz √© gerar tr√°fego do protocolo em um ambiente de teste e analis√°-lo pacote por pacote para entender seu funcionamento."
            },
            {
                "question": "O Wireshark pode detectar invas√µes ou malware?",
                "answer": "O Wireshark por si s√≥ n√£o √© uma ferramenta de detec√ß√£o de intrus√£o, mas pode ser utilizado para analisar evid√™ncias de atividades maliciosas:\n\n1. Pode identificar padr√µes de tr√°fego an√¥malos, como port scanning ou comunica√ß√µes n√£o autorizadas\n2. Permite verificar comunica√ß√µes com IPs ou dom√≠nios conhecidamente maliciosos\n3. Pode revelar padr√µes de beaconing (comunica√ß√µes regulares com servidores C2)\n4. Possibilita a inspe√ß√£o de payloads suspeitos em pacotes\n\nPara detec√ß√£o de intrus√£o em tempo real, ferramentas como IDS/IPS (Snort, Suricata) s√£o mais apropriadas. O Wireshark √© melhor para an√°lise forense p√≥s-evento ou investiga√ß√£o de comportamentos suspeitos espec√≠ficos."
            },
            {
                "question": "Como posso compartilhar capturas PCAP de forma segura?",
                "answer": "Ao compartilhar capturas PCAP, considere:\n\n1. Privacidade - As capturas podem conter dados sens√≠veis como credenciais, cookies, endere√ßos IP internos, etc.\n2. Sanitiza√ß√£o - Use ferramentas como TraceWrangler ou editcap para anonimizar IPs e outras informa√ß√µes sens√≠veis\n3. Reda√ß√£o - Utilize funcionalidades como File > Export Specified Packets para incluir apenas pacotes relevantes\n4. Seguran√ßa - Compartilhe arquivos por canais seguros, considere criptograf√°-los\n\nPara fins educacionais, voc√™ pode usar capturas p√∫blicas dispon√≠veis em sites como packetlife.net ou wireshark.org, que j√° foram sanitizadas para remo√ß√£o de informa√ß√µes sens√≠veis."
            },
            {
                "question": "Qual √© a diferen√ßa entre Wireshark e outras ferramentas de captura como tcpdump?",
                "answer": "As principais diferen√ßas incluem:\n\n1. Interface - Wireshark oferece uma GUI completa, enquanto tcpdump √© uma ferramenta de linha de comando\n2. An√°lise em tempo real - Wireshark possui recursos de decodifica√ß√£o e visualiza√ß√£o em tempo real mais ricos\n3. Plataformas - tcpdump √© nativo em sistemas Unix/Linux, enquanto Wireshark √© multiplataforma\n4. Recursos - Wireshark oferece recursos avan√ßados como gr√°ficos, estat√≠sticas, extra√ß√£o de objetos, etc.\n5. Performance - tcpdump geralmente consome menos recursos, sendo ideal para sistemas com limita√ß√µes\n\nO Wireshark e tcpdump s√£o complementares: tcpdump √© excelente para captura r√°pida em servidores remotos ou sistemas com recursos limitados, enquanto Wireshark √© superior para an√°lise detalhada e visualiza√ß√£o."
            }
        ]
        
        # Exibi√ß√£o das perguntas e respostas
        for i, faq in enumerate(faqs):
            with st.expander(faq["question"]):
                st.markdown(faq["answer"])

# Componente principal
def main():
    # Configura√ß√£o inicial
    st.set_page_config(
        page_title="CyberLab Wireshark",
        page_icon="üîê",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Carrega CSS personalizado
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #0066cc;
            text-align: center;
            margin-bottom: 1rem;
        }
        .sub-header {
            font-size: 1.8rem;
            color: #004d99;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        .highlight {
            background-color: #f0f8ff;
            padding: 1rem;
            border-radius: 5px;
            border-left: 5px solid #0066cc;
        }
        .code-block {
            background-color: #f5f5f5;
            padding: 1rem;
            border-radius: 5px;
            font-family: monospace;
        }
        .success-box {
            background-color: #d4edda;
            color: #155724;
            padding: 1rem;
            border-radius: 5px;
            border-left: 5px solid #155724;
        }
        .warning-box {
            background-color: #fff3cd;
            color: #856404;
            padding: 1rem;
            border-radius: 5px;
            border-left: 5px solid #856404;
        }
        .danger-box {
            background-color: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 5px;
            border-left: 5px solid #721c24;
        }
        .terminal {
            background-color: #000;
            color: #00ff00;
            padding: 1rem;
            border-radius: 5px;
            font-family: monospace;
        }
        .challenge-card {
            background-color: #e6f7ff;
            padding: 1.5rem;
            border-radius: 10px;
            margin-bottom: 1rem;
            border: 1px solid #91d5ff;
        }
        .sidebar .sidebar-content {
            background-color: #f8f9fa;
        }
        .packet-row {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .packet-row:hover {
            background-color: #e6f7ff;
        }
        .packet-details {
            font-family: monospace;
            white-space: pre-wrap;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
        }
        .nav-link {
            text-decoration: none;
            color: #0066cc;
            font-weight: bold;
            padding: 0.5rem;
            margin: 0.2rem;
            border-radius: 5px;
        }
        .nav-link:hover {
            background-color: #e6f7ff;
        }
        .progress-container {
            margin-top: 1rem;
            margin-bottom: 1rem;
        }
        .footer {
            text-align: center;
            margin-top: 3rem;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Sidebar para navega√ß√£o
    with st.sidebar:
        st.image("https://www.wireshark.org/assets/images/wireshark-logo.png", width=200)
        st.markdown("<h1 style='text-align: center;'>CyberLab Wireshark</h1>", unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Op√ß√µes de navega√ß√£o
        menu_options = [
            "In√≠cio",
            "Laborat√≥rio Pr√°tico",
            "Tutorial Interativo",
            "Roadmap de Estudos",
            "Desafios Pr√°ticos",
            "Recursos Educacionais"
        ]
        
        selection = st.radio("Navega√ß√£o", menu_options)
        
        st.markdown("---")
        
        # Acompanhamento de progresso
        if st.checkbox("Habilitar acompanhamento de progresso"):
            st.markdown("<h3>Seu Progresso</h3>", unsafe_allow_html=True)
            
            # Simula√ß√£o de progresso
            progress_areas = {
                "Fundamentos": 75,
                "An√°lise de Protocolos": 50,
                "Troubleshooting": 30,
                "Seguran√ßa": 25,
                "T√©cnicas Avan√ßadas": 10
            }
            
            for area, progress in progress_areas.items():
                st.markdown(f"**{area}**")
                st.progress(progress / 100)
        
        st.markdown("---")
        
        # Links √∫teis
        st.markdown("<h3>Links √öteis</h3>", unsafe_allow_html=True)
        st.markdown("[Site Oficial do Wireshark](https://www.wireshark.org/)")
        st.markdown("[Documenta√ß√£o](https://www.wireshark.org/docs/)")
        st.markdown("[Wiki do Wireshark](https://wiki.wireshark.org/)")
        st.markdown("[Comunidade](https://ask.wireshark.org/)")
    
    # Conte√∫do principal
    if selection == "In√≠cio":
        st.markdown("<h1 class='main-header'>Laborat√≥rio Web de Ciberseguran√ßa com Wireshark</h1>", unsafe_allow_html=True)
        
        st.markdown("""
        <div class="highlight">
            <p>Bem-vindo ao CyberLab Wireshark, sua plataforma completa para aprender an√°lise de tr√°fego de rede e seguran√ßa com Wireshark. Este laborat√≥rio interativo foi projetado para estudantes e profissionais de seguran√ßa da informa√ß√£o, combinando teoria e pr√°tica.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Vis√£o geral das funcionalidades
        st.markdown("<h2 class='sub-header'>O que voc√™ encontrar√° neste laborat√≥rio:</h2>", unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <h3>üî¨ Laborat√≥rio Pr√°tico</h3>
            <ul>
                <li>Simulador interativo do Wireshark</li>
                <li>An√°lise de capturas PCAP reais</li>
                <li>Detec√ß√£o de atividades suspeitas</li>
                <li>Gera√ß√£o de relat√≥rios de an√°lise</li>
            </ul>
            
            <h3>üìö Tutorial Interativo</h3>
            <ul>
                <li>Guia passo a passo sobre o Wireshark</li>
                <li>Explica√ß√µes detalhadas de cada recurso</li>
                <li>Exemplos pr√°ticos e casos de uso</li>
                <li>Material adaptado a diferentes n√≠veis</li>
            </ul>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <h3>üèÜ Desafios Pr√°ticos</h3>
            <ul>
                <li>Desafios de an√°lise de tr√°fego</li>
                <li>Investiga√ß√µes de seguran√ßa simuladas</li>
                <li>Exerc√≠cios de troubleshooting</li>
                <li>Cen√°rios de forense digital</li>
            </ul>
            
            <h3>üõ£Ô∏è Roadmap de Estudos</h3>
            <ul>
                <li>Caminho de aprendizado estruturado</li>
                <li>Progress√£o do b√°sico ao avan√ßado</li>
                <li>Certifica√ß√µes recomendadas</li>
                <li>Recursos de aprendizado complementares</li>
            </ul>
            """, unsafe_allow_html=True)
        
        # Benef√≠cios do laborat√≥rio
        st.markdown("<h2 class='sub-header'>Benef√≠cios deste Laborat√≥rio Web:</h2>", unsafe_allow_html=True)
        
        st.markdown("""
        <div class="highlight">
            <ul>
                <li><strong>Aprendizado Pr√°tico</strong>: Experimente com pacotes reais sem necessidade de configurar um ambiente complexo</li>
                <li><strong>Acessibilidade</strong>: Estude e pratique em qualquer dispositivo com acesso √† web</li>
                <li><strong>Conte√∫do Abrangente</strong>: Desde conceitos b√°sicos at√© t√©cnicas avan√ßadas de an√°lise</li>
                <li><strong>Foco em Seguran√ßa</strong>: Aprenda a detectar amea√ßas, investigar incidentes e proteger redes</li>
                <li><strong>Atualiza√ß√£o Constante</strong>: Conte√∫do renovado regularmente para refletir novas amea√ßas e t√©cnicas</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Para quem se destina
        st.markdown("<h2 class='sub-header'>Para quem √© este laborat√≥rio?</h2>", unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div class="success-box">
                <h3>Estudantes</h3>
                <p>Complemento ideal para cursos de seguran√ßa da informa√ß√£o, redes de computadores e sistemas de informa√ß√£o.</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="warning-box">
                <h3>Profissionais de TI</h3>
                <p>Aperfei√ßoe suas habilidades de an√°lise de rede, troubleshooting e detec√ß√£o de amea√ßas.</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="danger-box">
                <h3>Especialistas em Seguran√ßa</h3>
                <p>Refine suas t√©cnicas de investiga√ß√£o forense digital e an√°lise de amea√ßas.</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Como come√ßar
        st.markdown("<h2 class='sub-header'>Como come√ßar:</h2>", unsafe_allow_html=True)
        
        st.markdown("""
        <ol>
            <li>Explore o <strong>Tutorial Interativo</strong> para aprender os fundamentos do Wireshark</li>
            <li>Siga o <strong>Roadmap de Estudos</strong> para um aprendizado estruturado</li>
            <li>Pratique no <strong>Laborat√≥rio</strong> com exemplos reais de tr√°fego</li>
            <li>Teste suas habilidades com os <strong>Desafios Pr√°ticos</strong></li>
            <li>Consulte os <strong>Recursos Educacionais</strong> para aprofundar seus conhecimentos</li>
        </ol>
        """, unsafe_allow_html=True)
        
        # Rodap√©
        st.markdown("""
        <div class="footer">
            <p>CyberLab Wireshark - Laborat√≥rio Web de Ciberseguran√ßa</p>
            <p><small>Desenvolvido para fins educacionais</small></p>
        </div>
        """, unsafe_allow_html=True)
    
    elif selection == "Laborat√≥rio Pr√°tico":
        practical_lab()
    
    elif selection == "Tutorial Interativo":
        interactive_tutorial()
    
    elif selection == "Roadmap de Estudos":
        study_roadmap()
    
    elif selection == "Desafios Pr√°ticos":
        practical_challenges()
    
    elif selection == "Recursos Educacionais":
        educational_resources()

if __name__ == "__main__":
    main()